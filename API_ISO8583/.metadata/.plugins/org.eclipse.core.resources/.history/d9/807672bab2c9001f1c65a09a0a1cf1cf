package API.ISO8583.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import API.ISO8583.dto.ISO8583RequestDTO;
import API.ISO8583.service.ISO8583Service;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/iso8583/process")
public class ISO8583Controller {

    @Autowired
    private ISO8583Service iso8583Service;

    /**
     * /inquiry: Truy vấn (nguồn Bank A, đích Bank B).
     * Nếu sourcePan OK, forward sang Bank B để kiểm tra destPan.
     * Nếu Bank B trả OK => Bank A sinh confirmCode => trả về client.
     */
    @PostMapping("/inquiry")
    public CompletableFuture<ResponseEntity<String>> inquiry(@RequestBody ISO8583RequestDTO dto) {
        // Ví dụ JSON:
        // {
        //   "mti": "0200",
        //   "processingCode": "432020",
        //   "sourcePan": "111111",
        //   "destinationPan": "888888",
        //   "transactionAmount": "100000",
        //   "confirmCode": ""
        // }
        return iso8583Service.processISO8583RequestAsync(dto)
                .thenApply(ResponseEntity::ok)
                .exceptionally(ex ->
                    ResponseEntity.status(500)
                        .body("{\"error\":\"Error processing inquiry: " + ex.getMessage() + "\"}")
                );
    }

    /**
     * /payment: Chuyển tiền liên ngân hàng
     * Client phải gửi confirmCode do Bank A sinh trước đó.
     */
    @PostMapping("/payment")
    public CompletableFuture<ResponseEntity<String>> payment(@RequestBody ISO8583RequestDTO dto) {
        // Ví dụ JSON:
        // {
        //   "mti":"0200",
        //   "processingCode":"912020",
        //   "sourcePan":"111111",
        //   "destinationPan":"888888",
        //   "transactionAmount":"100000",
        //   "confirmCode":"ABC123"
        // }
        return iso8583Service.processISO8583RequestAsync(dto)
                .thenApply(ResponseEntity::ok)
                .exceptionally(ex ->
                    ResponseEntity.status(500)
                        .body("{\"error\":\"Error processing payment: " + ex.getMessage() + "\"}")
                );
    }
}

