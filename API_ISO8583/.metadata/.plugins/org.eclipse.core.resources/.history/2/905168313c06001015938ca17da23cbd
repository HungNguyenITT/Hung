package ZaloPay.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class ZaloPayService {
    private static final String BANK_CODE = "970403";
    private static final String API1_URL = "http://localhost:8081/api1";

    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("888888", new Account("888888", 3000000L, "ACTIVE"));
        ACCOUNTS.put("999999", new Account("999999", 5000000L, "ACTIVE"));
        ACCOUNTS.put("777777", new Account("777777", 1000000L, "LOCKED"));
    }

    public Map<String, String> processInquiry(Map<String, String> req) {
        logInbound("ZaloPay","/inquiry", req);

        // Tạo request (F1=0200, F2, F3=432020, F4,... F39 ko cần)
        Map<String,String> standardizedReq = standardizeRequest(req,"432020");

        Map<String,String> resp;
        if(!BANK_CODE.equals(standardizedReq.get("F100"))){
            // => Gửi sang API1
            resp = sendToApi1(standardizedReq, "/inquiry");
        } else {
            // local check
            String pan = standardizedReq.getOrDefault("F2","");
            Account acc = ACCOUNTS.get(pan);
            String rc = (acc==null || !"ACTIVE".equalsIgnoreCase(acc.getStatus())) ? "14" : "00";
            resp = new HashMap<>(standardizedReq);
            resp.put("F39", rc);
        }

        logOutbound("ZaloPay","/inquiry", standardizedReq);
        logInbound("ZaloPay","/inquiryResp", resp);
        return resp;
    }

    public Map<String, String> processPayment(Map<String, String> req) {
        logInbound("ZaloPay","/payment", req);

        // Tạo request (F3=912020,...)
        Map<String,String> standardizedReq = standardizeRequest(req,"912020");

        Map<String,String> resp;
        if(!BANK_CODE.equals(standardizedReq.get("F100"))){
            resp = sendToApi1(standardizedReq, "/payment");
        } else {
            // local
            String pan = standardizedReq.getOrDefault("F2","");
            long amt = parseLongSafe(standardizedReq.getOrDefault("F4","0"));
            Account acc = ACCOUNTS.get(pan);
            String rc = (acc==null)? "14":
                        (!"ACTIVE".equalsIgnoreCase(acc.getStatus()))? "62":
                        (acc.getBalance()<amt)? "51":"00";
            if("00".equals(rc)) acc.setBalance(acc.getBalance()-amt);

            resp = new HashMap<>(standardizedReq);
            resp.put("F39", rc);
        }

        logOutbound("ZaloPay","/payment", standardizedReq);
        logInbound("ZaloPay","/paymentResp", resp);
        return resp;
    }

    // Chuẩn hóa request => F1=0200,F2,... F39 ko có
    private Map<String,String> standardizeRequest(Map<String,String> req, String defaultPC){
        Map<String,String> st = new HashMap<>(req);
        if(!st.containsKey("F1")) st.put("F1","0200");
        if(!st.containsKey("F2") && st.containsKey("sourcePan")){
            st.put("F2", st.get("sourcePan"));
        }
        if(!st.containsKey("F3")) st.put("F3", defaultPC);

        // F4 => 12 char
        if(!st.containsKey("F4")) {
            st.put("F4","000000000000");
        } else {
            long amt = parseLongSafe(st.get("F4"));
            st.put("F4", String.format("%012d", amt));
        }

        if(!st.containsKey("F11")) st.put("F11", generateF11());
        if(!st.containsKey("F12")) st.put("F12", generateF12());
        if(!st.containsKey("F13")) st.put("F13", generateF13());
        // Bank code = 970403
        st.put("F32", BANK_CODE);
        if(!st.containsKey("F100")) st.put("F100","");

        // F103 => if missing but have destPan
        if(!st.containsKey("F103") && st.containsKey("destPan")){
            st.put("F103", st.get("destPan"));
        }
        return st;
    }

    private Map<String,String> sendToApi1(Map<String,String> json, String endpoint){
        String url = API1_URL+endpoint;
        System.out.println("=== [ZaloPay] Outbound to API1 " + endpoint + " ===");
        System.out.println(JsonMapperUtil.toJson(json));

        String respJson = doHttpPost(url, JsonMapperUtil.toJson(json));
        if(respJson==null){
            System.out.println("[ZaloPay] Error: No response from API1");
            Map<String,String> err=new HashMap<>(json);
            err.put("F39","96");
            return err;
        }
        Map<String,String> resp = JsonMapperUtil.fromJson(respJson);
        return resp;
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try{
            URL u=new URL(url);
            conn=(HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);

            OutputStream out=conn.getOutputStream();
            out.write(body.getBytes("UTF-8"));
            out.flush();
            out.close();

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            InputStream in=conn.getInputStream();
            byte[] buf=new byte[4096];
            int len;
            while((len=in.read(buf))!=-1){
                baos.write(buf,0,len);
            }
            in.close();
            return baos.toString("UTF-8");
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }finally{
            if(conn!=null) conn.disconnect();
        }
    }

    private long parseLongSafe(String s){
        try { return Long.parseLong(s); } catch(Exception e){ return 0; }
    }

    private String generateF11(){ return String.format("%06d",(int)(Math.random()*1000000)); }
    private String generateF12(){ return LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")); }
    private String generateF13(){ return LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")); }

    private void logInbound(String svc, String path, Map<String,String> data){
        System.out.println("=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========");
    }

    private void logOutbound(String svc,String path, Map<String,String> data){
        System.out.println("=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========");
    }

    private static class Account{
        private String pan; 
        private long balance;
        private String status;

        public Account(String p,long b,String s){
            this.pan=p; this.balance=b; this.status=s;
        }
        public long getBalance(){return balance;}
        public void setBalance(long x){balance=x;}
        public String getStatus(){return status;}
    }
}
