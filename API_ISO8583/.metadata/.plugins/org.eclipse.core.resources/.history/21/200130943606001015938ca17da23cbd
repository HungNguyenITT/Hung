package ZaloPay.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class ZaloPayService {
    private static final String BANK_CODE = "970403"; 
    private static final String API1_URL  = "http://localhost:8081/api1";

    // Giả lập DB local
    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        // Pan -> (balance, status)
        ACCOUNTS.put("888888", new Account("888888",3000000L,"ACTIVE"));
        ACCOUNTS.put("999999", new Account("999999",5000000L,"ACTIVE"));
        ACCOUNTS.put("777777", new Account("777777",1000000L,"LOCKED"));
    }

    // ========== Inquiry ==========
    public Map<String,String> processInquiry(Map<String,String> req){
        logInbound("ZaloPay","/inquiry",req);

        // Bổ sung/chuẩn hoá -> F1, F2,..., F3=432020, F39 => default
        Map<String,String> isoReq= standardizeRequest(req,"432020");

        // forward hay local
        if(!BANK_CODE.equals( isoReq.get("F100") )){
            // => forward sang API1
            Map<String,String> resp= sendToApi1(isoReq,"/inquiry");
            return resp;
        } else {
            // local => check
            String pan= isoReq.getOrDefault("F2","");
            Account acc= ACCOUNTS.get(pan);
            String rc;
            if(acc==null){
                rc="14";
            } else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())){
                rc="62";
            } else {
                rc="00";
            }
            Map<String,String> resp= new HashMap<>(isoReq);
            resp.put("F39",rc);
            logOutbound("ZaloPay","/inquiry(local)", isoReq);
            logInbound("ZaloPay","/inquiryResp(local)", resp);
            return resp;
        }
    }

    // ========== Payment ==========
    public Map<String,String> processPayment(Map<String,String> req){
        logInbound("ZaloPay","/payment",req);

        Map<String,String> isoReq= standardizeRequest(req,"912020");

        if(!BANK_CODE.equals( isoReq.get("F100"))){
            // forward => API1
            return sendToApi1(isoReq,"/payment");
        } else {
            // local
            String pan= isoReq.getOrDefault("F2","");
            long amt= parseLong( isoReq.getOrDefault("F4","0"));
            Account acc= ACCOUNTS.get(pan);
            String rc;
            if(acc==null){
                rc="14";
            } else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())){
                rc="62";
            } else if(acc.getBalance()<amt){
                rc="51";
            } else {
                acc.setBalance( acc.getBalance()-amt );
                rc="00";
            }
            Map<String,String> resp= new HashMap<>(isoReq);
            resp.put("F39", rc);

            logOutbound("ZaloPay","/payment(local)", isoReq);
            logInbound("ZaloPay","/paymentResp(local)", resp);
            return resp;
        }
    }

    // ========== forward => API1 ==========
    private Map<String,String> sendToApi1(Map<String,String> j, String endpoint){
        String url= API1_URL+endpoint;
        logOutbound("ZaloPay","=>API1 "+endpoint, j);

        String body= JsonMapperUtil.toJson(j);
        String respJson= doHttpPost(url, body);
        if(respJson==null){
            // error => F39=96
            Map<String,String> err= new HashMap<>(j);
            err.put("F39","96");
            return err;
        }
        Map<String,String> resp= JsonMapperUtil.fromJson(respJson);
        if(!resp.containsKey("F39")){
            resp.put("F39","96");
        }
        logInbound("ZaloPay","Resp from API1 => inquiryResp/paymentResp", resp);
        return resp;
    }

    // ========== standardize JSON => F1,F2,F3,F4,... ========== 
    private Map<String,String> standardizeRequest(Map<String,String> req, String defaultPC){
        Map<String,String> isoReq= new HashMap<>();
        req.forEach((k,v)-> isoReq.put(k.toUpperCase(), v));
        if(!isoReq.containsKey("F1")){
            isoReq.put("F1","0200");
        }
        if(!isoReq.containsKey("F2") && isoReq.containsKey("SOURCEPAN")){
            isoReq.put("F2", isoReq.get("SOURCEPAN"));
        }
        if(!isoReq.containsKey("F3")){
            isoReq.put("F3", defaultPC);
        }
        if(!isoReq.containsKey("F4")){
            isoReq.put("F4","000000000000");
        } else {
            long amt= parseLong( isoReq.get("F4"));
            isoReq.put("F4", String.format("%012d",amt));
        }
        // F11 => random
        if(!isoReq.containsKey("F11")){
            isoReq.put("F11", String.format("%06d",(int)(Math.random()*1000000)));
        }
        // F12 => HHmmss
        if(!isoReq.containsKey("F12")){
            isoReq.put("F12", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
        }
        // F13 => MMdd
        if(!isoReq.containsKey("F13")){
            isoReq.put("F13", LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")));
        }
        // F32 => "970403"
        isoReq.put("F32", BANK_CODE);
        // F100 => default ""
        if(!isoReq.containsKey("F100")){
            isoReq.put("F100","");
        }
        // F103 => if missing but has DESTPAN
        if(!isoReq.containsKey("F103") && isoReq.containsKey("DESTPAN")){
            isoReq.put("F103", isoReq.get("DESTPAN"));
        }
        return isoReq;
    }

    private long parseLong(String s){
        try{ return Long.parseLong(s);}catch(Exception e){return 0;}
    }
    private String doHttpPost(String url, String body){
        java.net.HttpURLConnection conn=null;
        try{
            java.net.URL u= new java.net.URL(url);
            conn= (java.net.HttpURLConnection) u.openConnection();
            conn.setRequestMethod("POST");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");

            try(OutputStream out= conn.getOutputStream()){
                out.write(body.getBytes("UTF-8"));
            }
            ByteArrayOutputStream baos= new ByteArrayOutputStream();
            try(InputStream in= conn.getInputStream()){
                byte[] buf= new byte[4096];
                int len;
                while((len=in.read(buf))!=-1){
                    baos.write(buf,0,len);
                }
            }
            return baos.toString("UTF-8");
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }finally{
            if(conn!=null) conn.disconnect();
        }
    }

    private void logInbound(String svc, String path, Map<String,String> data){
        System.out.println("=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========");
    }
    private void logOutbound(String svc, String path, Map<String,String> data){
        System.out.println("=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========");
    }

    static class Account{
        private String pan;
        private long balance;
        private String status;
        public Account(String p, long b, String s){ pan=p; balance=b; status=s;}
        public long getBalance(){return balance;}
        public void setBalance(long b){balance=b;}
        public String getStatus(){return status;}
    }
}
