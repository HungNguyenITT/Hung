//package Napas.server;
//
//import Napas.entity.NapasMessage;
//import Napas.repository.NapasMessageRepository;
//import org.jpos.iso.ISOException;
//import org.jpos.iso.ISOMsg;
//import org.jpos.iso.packager.ISO87APackager;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Component;
//import utils.IsoSocketUtils;
//import utils.LogHelper;
//
//import javax.annotation.PostConstruct;
//import java.io.*;
//import java.net.ServerSocket;
//import java.net.Socket;
//import java.time.LocalDateTime;
//import java.time.format.DateTimeFormatter;
//import java.util.Random;
//
//@Component
//public class SocketServer implements Runnable {
//    private static final int PORT=9090;
//    private static final Random RAND=new Random();
//
//    @Autowired
//    private NapasMessageRepository repo;
//
//    @PostConstruct
//    public void init(){
//        new Thread(this).start();
//    }
//
//    public void run(){
//        try(ServerSocket ss=new ServerSocket(PORT)){
//            while(true){
//                Socket client=ss.accept();
//                new Thread(() -> handleClient(client)).start();
//            }
//        } catch(Exception e){}
//    }
//
//    private void handleClient(Socket sock){
//        try(InputStream in=sock.getInputStream(); OutputStream out=sock.getOutputStream()){
//            ISOMsg isoReq= IsoSocketUtils.readIsoMessageWithHeader(in, new ISO87APackager());
//            LogHelper.logToBothBanks(isoReq, "Phát lệnh");
//            NapasMessage reqEntity= createEntity("REQUEST", isoReq);
//            repo.save(reqEntity);
//
//            ISOMsg isoResp= forwardToTargetWait15s(isoReq);
//
//            LogHelper.logToBothBanks(isoResp, "Trả lệnh");
//            NapasMessage respEntity= createEntity("RESPONSE", isoResp);
//            repo.save(respEntity);
//
//            IsoSocketUtils.sendIsoMessageWithHeader(out, isoResp);
//            out.flush();
//            sock.shutdownOutput();
//
//        } catch(Exception e){}
//    }
//
//    private ISOMsg forwardToTargetWait15s(ISOMsg req){
//        int port= pickPort(req);
//        if(port<=0) return buildTimeoutResp(req);
//
//        ISOMsg[] holder=new ISOMsg[1];
//        try(Socket sock=new Socket("localhost", port);
//            OutputStream out=sock.getOutputStream();
//            InputStream in=sock.getInputStream()){
//            IsoSocketUtils.sendIsoMessageWithHeader(out, req);
//            sock.shutdownOutput();
//
//            Thread readerThread=new Thread(() -> {
//                try {
//                    ISOMsg resp= IsoSocketUtils.readIsoMessageWithHeader(in, new ISO87APackager());
//                    synchronized(holder){ holder[0]= resp; }
//                } catch(Exception ex){}
//            });
//            readerThread.start();
//
//            Thread.sleep(15000);
//
//            synchronized(holder){
//                if(holder[0]!=null){
//                    ISOMsg isoResp= holder[0];
//                    if(!isoResp.hasField(32) && req.hasField(32)) isoResp.set(32, req.getString(32));
//                    if(!isoResp.hasField(100) && req.hasField(100)) isoResp.set(100, req.getString(100));
//                    return isoResp;
//                }
//            }
//        } catch(Exception e){}
//
//        return buildTimeoutResp(req);
//    }
//
//    private ISOMsg buildTimeoutResp(ISOMsg req){
//        try {
//            ISOMsg r=new ISOMsg();
//            r.setPackager(new ISO87APackager());
//            int mti=Integer.parseInt(req.getMTI());
//            r.setMTI(String.format("%04d", mti+10));
//            copyIfPresent(req,r,2);
//            copyIfPresent(req,r,3);
//            copyIfPresent(req,r,4);
//            copyIfPresent(req,r,11);
//            copyIfPresent(req,r,12);
//            copyIfPresent(req,r,13);
//            copyIfPresent(req,r,32);
//            copyIfPresent(req,r,37);
//            copyIfPresent(req,r,100);
//            copyIfPresent(req,r,103); 
//            r.set(39,"68");
//            return r;
//        } catch(Exception e){
//            return null;
//        }
//    }
//
//    private int pickPort(ISOMsg req){
//        if(!req.hasField(100)) return -1;
//        String f100= req.getString(100);
//        switch(f100){
//            case "970401": return 9101;
//            case "970402": return 9102;
//            case "970403": return 9094; 
//            case "970404": return 9092; 
//            default:return -1;
//        }
//    }
//
//    private NapasMessage createEntity(String type, ISOMsg iso) throws ISOException {
//        NapasMessage n=new NapasMessage();
//        n.setType(type);
//        n.setF1( iso.getMTI());
//        if(iso.hasField(2)) n.setF2(iso.getString(2));
//        if(iso.hasField(3)) n.setF3(iso.getString(3));
//        if(iso.hasField(4)) n.setF4(iso.getString(4));
//        if(iso.hasField(11)) n.setF11(iso.getString(11));
//        if(iso.hasField(12)) n.setF12(iso.getString(12));
//        if(iso.hasField(13)) n.setF13(iso.getString(13));
//        if(iso.hasField(32)) n.setF32(iso.getString(32));
//        if(iso.hasField(39)) n.setF39(iso.getString(39));
//        if(iso.hasField(100)) n.setF100(iso.getString(100));
//        if(iso.hasField(103)) n.setF103(iso.getString(103));
//        return n;
//    }
//
//    private void copyIfPresent(ISOMsg from, ISOMsg to, int f) throws ISOException {
//        if(from.hasField(f)){
//            to.set(f, from.getString(f));
//        }
//    }
//}
package Napas.server;

import Napas.entity.NapasMessage;
import Napas.repository.NapasMessageRepository;
import Napas.service.PortConfigService;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.ISO87APackager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import utils.IsoSocketUtils;
import utils.LogHelper;

import javax.annotation.PostConstruct;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;

@Component
public class SocketServer implements Runnable {

    // Port chính của server Napas đã bị loại bỏ khỏi đây và sẽ được lấy từ file cấu hình
    private static final Random RAND = new Random();

    @Autowired
    private NapasMessageRepository repo;

    @Autowired
    private PortConfigService portConfigService; // Dịch vụ lấy port từ file cấu hình

    @PostConstruct
    public void init() {
        new Thread(this).start();
    }

    public void run() {
        try (ServerSocket ss = new ServerSocket(getServerPort())) { // Lấy port server từ file cấu hình
            while (true) {
                Socket client = ss.accept();
                new Thread(() -> handleClient(client)).start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleClient(Socket sock) {
        try (InputStream in = sock.getInputStream();
             OutputStream out = sock.getOutputStream()) {
            ISOMsg isoReq = IsoSocketUtils.readIsoMessageWithHeader(in, new ISO87APackager());
            LogHelper.logToBothBanks(isoReq, "Phát lệnh");
            NapasMessage reqEntity = createEntity("REQUEST", isoReq);
            repo.save(reqEntity);

            ISOMsg isoResp = forwardToTargetWait15s(isoReq);

            LogHelper.logToBothBanks(isoResp, "Trả lệnh");
            NapasMessage respEntity = createEntity("RESPONSE", isoResp);
            repo.save(respEntity);

            IsoSocketUtils.sendIsoMessageWithHeader(out, isoResp);
            out.flush();
            sock.shutdownOutput();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private ISOMsg forwardToTargetWait15s(ISOMsg req) {
        int port = pickPort(req); // Lấy port từ file cấu hình
        if (port <= 0) return buildTimeoutResp(req);

        ISOMsg[] holder = new ISOMsg[1];
        try (Socket sock = new Socket("localhost", port);
             OutputStream out = sock.getOutputStream();
             InputStream in = sock.getInputStream()) {
            IsoSocketUtils.sendIsoMessageWithHeader(out, req);
            sock.shutdownOutput();

            Thread readerThread = new Thread(() -> {
                try {
                    ISOMsg resp = IsoSocketUtils.readIsoMessageWithHeader(in, new ISO87APackager());
                    synchronized (holder) {
                        holder[0] = resp;
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            readerThread.start();

            Thread.sleep(15000);

            synchronized (holder) {
                if (holder[0] != null) {
                    ISOMsg isoResp = holder[0];
                    if (!isoResp.hasField(32) && req.hasField(32))
                        isoResp.set(32, req.getString(32));
                    if (!isoResp.hasField(100) && req.hasField(100))
                        isoResp.set(100, req.getString(100));
                    return isoResp;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return buildTimeoutResp(req);
    }

    private ISOMsg buildTimeoutResp(ISOMsg req) {
        try {
            ISOMsg r = new ISOMsg();
            r.setPackager(new ISO87APackager());
            int mti = Integer.parseInt(req.getMTI());
            r.setMTI(String.format("%04d", mti + 10));
            copyIfPresent(req, r, 2);
            copyIfPresent(req, r, 3);
            copyIfPresent(req, r, 4);
            copyIfPresent(req, r, 11);
            copyIfPresent(req, r, 12);
            copyIfPresent(req, r, 13);
            copyIfPresent(req, r, 32);
            copyIfPresent(req, r, 37);
            copyIfPresent(req, r, 100);
            copyIfPresent(req, r, 103);
            r.set(39, "68");
            return r;
        } catch (Exception e) {
            return null;
        }
    }

    private int pickPort(ISOMsg req) {
        if (!req.hasField(100))
            return -1;
        String bankCode = req.getString(100); // Lấy mã ngân hàng từ trường 100 trong ISO message
        return portConfigService.getPort(bankCode); // Lấy port từ file cấu hình thông qua PortConfigService
    }

    private int getServerPort() {
        // Lấy port server từ file cấu hình (Port chính)
        return portConfigService.getPort("server"); // "server" có thể là một mã tùy chỉnh cho port của server chính
    }

    private NapasMessage createEntity(String type, ISOMsg iso) throws ISOException {
        NapasMessage n = new NapasMessage();
        n.setType(type);
        n.setF1(iso.getMTI());
        if (iso.hasField(2))
            n.setF2(iso.getString(2));
        if (iso.hasField(3))
            n.setF3(iso.getString(3));
        if (iso.hasField(4))
            n.setF4(iso.getString(4));
        if (iso.hasField(11))
            n.setF11(iso.getString(11));
        if (iso.hasField(12))
            n.setF12(iso.getString(12));
        if (iso.hasField(13))
            n.setF13(iso.getString(13));
        if (iso.hasField(32))
            n.setF32(iso.getString(32));
        if (iso.hasField(39))
            n.setF39(iso.getString(39));
        if (iso.hasField(100))
            n.setF100(iso.getString(100));
        if (iso.hasField(103))
            n.setF103(iso.getString(103));
        return n;
    }

    private void copyIfPresent(ISOMsg from, ISOMsg to, int f) throws ISOException {
        if (from.hasField(f)) {
            to.set(f, from.getString(f));
        }
    }
}
