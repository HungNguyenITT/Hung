package BankVCB;

import org.jpos.iso.*;
import org.jpos.iso.packager.GenericPackager;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.*;

/**
 * VCB bank (970401) client connecting to Napas at port=1212
 */
public class VcbSocket {

    private static final String NAPAS_HOST = "localhost";
    private static final int NAPAS_PORT = 1212;
    private static final String F32_THIS_BANK = "970401";

    private static final Map<String,Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("111111", new Account("111111", 2_000_000L,"ACTIVE"));
        ACCOUNTS.put("222222", new Account("222222", 1_000_000L,"ACTIVE"));
        ACCOUNTS.put("333333", new Account("333333", 5_000_000L,"LOCKED"));
    }

    private static Socket socket;
    private static OutputStream out;
    private static InputStream in;

    // pending requests => STAN => future
    private static final Map<String,CompletableFuture<ISOMsg>> pendingRequests = new ConcurrentHashMap<>();

    // jPOS packager loaded from iso87binary.xml
    private static GenericPackager isoPackager;

    public static void main(String[] args) {
        loadIsoPackager();
        connectToNapas();
        runCLI();
    }

    // load iso87binary.xml from resource
    private static void loadIsoPackager() {
        try {
            // giả sử file để ở resources/iso87binary.xml
            InputStream is = VcbSocket.class.getResourceAsStream("/iso87binary.xml");
            if(is == null) {
                throw new RuntimeException("[VCB] iso87binary.xml not found in resources!");
            }
            isoPackager = new GenericPackager(is);
            System.out.println("[VCB] Loaded iso87binary.xml => packager ready");
        } catch(Exception e){
            throw new RuntimeException("[VCB] Failed to load iso87binary.xml", e);
        }
    }

    private static void connectToNapas() {
        while(true) {
            try {
                socket = new Socket(NAPAS_HOST, NAPAS_PORT);
                socket.setSoTimeout(0); // no read timeout
                out = socket.getOutputStream();
                in  = socket.getInputStream();
                System.out.println("[VCB] connected Napas " + socket.getRemoteSocketAddress());

                new Thread(VcbSocket::readLoop).start();
                break;
            } catch(Exception e){
                System.err.println("[VCB] connect Napas fail => retry in 5s... " + e.getMessage());
                try { Thread.sleep(5000); } catch(Exception ignore){}
            }
        }
    }

    private static void readLoop() {
        while(true) {
            try {
                ISOMsg iso = IsoSocketUtils.readIsoMessageWithHeader(in, isoPackager);
                if(iso == null) {
                    System.out.println("[VCB] read null => disconnect?");
                    break;
                }
                IsoDebugHelper.debugIso("[VCB] Inbound", iso);

                String stan = iso.hasField(11) ? iso.getString(11) : null;
                CompletableFuture<ISOMsg> cf = (stan==null) ? null : pendingRequests.remove(stan);

                if(cf != null) {
                    cf.complete(iso);
                } else {
                    // inbound request => handle credit/inquiry
                    handleInboundRequest(iso);
                }

            } catch(SocketTimeoutException te){
                continue;
            } catch(Exception e){
                e.printStackTrace();
                break;
            }
        }
        System.out.println("[VCB] readLoop ended => close socket => reconnect?");
        try { socket.close(); } catch(Exception ignore){}
        connectToNapas();
    }

    /**
     * Inbound request from Napas => process
     * e.g. inquiry or payment (credit) => build response => send
     */
    private static void handleInboundRequest(ISOMsg reqIso) throws ISOException, IOException {
        String pc   = reqIso.hasField(3)? reqIso.getString(3) : "";
        String f103 = reqIso.hasField(103)? reqIso.getString(103): "";
        long amt = parseAmount(reqIso);

        String rc = "96";
        if("432020".equals(pc)) {
            // inquiry => check ACCOUNTS
            Account acc = ACCOUNTS.get(f103);
            if(acc==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(acc.status)) rc="62";
            else rc="00";
        } else if("912020".equals(pc)) {
            // payment => credit local
            Account acc = ACCOUNTS.get(f103);
            if(acc==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(acc.status)) rc="62";
            else {
                acc.balance += amt;
                rc="00";
            }
        }

        // build resp
        ISOMsg resp = new ISOMsg();
        resp.setPackager(isoPackager);
        int reqMti = Integer.parseInt(reqIso.getMTI());
        resp.setMTI(String.format("%04d", reqMti+10));

        copyIfPresent(reqIso, resp, 2);
        copyIfPresent(reqIso, resp, 3);
        copyIfPresent(reqIso, resp, 4);
        copyIfPresent(reqIso, resp, 11);
        copyIfPresent(reqIso, resp, 12);
        copyIfPresent(reqIso, resp, 13);
        copyIfPresent(reqIso, resp, 32);
        copyIfPresent(reqIso, resp, 100);
        copyIfPresent(reqIso, resp, 103);

        resp.set(39, rc);

        IsoDebugHelper.debugIso("[VCB] inboundResp => Napas", resp);
        IsoSocketUtils.sendIsoMessageWithHeader(out, resp);
    }

    // CLI
    private static void runCLI() {
        Scanner sc = new Scanner(System.in);
        String receivingBankF100 = null;

        while(true) {
            System.out.println("[VCB CLI] 1.Set bank 2.Inquiry 3.Payment 0.Exit");
            String choice = sc.nextLine().trim();
            if("0".equals(choice)) break;

            switch(choice) {
                case "1":
                    System.out.println("2=TCB(970402), 3=Zalo(970403), 4=NganLuong(970404)");
                    String c2 = sc.nextLine().trim();
                    if("2".equals(c2)) receivingBankF100="970402";
                    else if("3".equals(c2)) receivingBankF100="970403";
                    else if("4".equals(c2)) receivingBankF100="970404";
                    else {
                        System.out.println("Invalid bank code");
                    }
                    break;
                case "2": { // Inquiry
                    if(receivingBankF100==null) {
                        System.out.println("No receiving bank set!");
                        break;
                    }
                    System.out.print("sourcePan: ");
                    String sp = sc.nextLine().trim();
                    System.out.print("destPan: ");
                    String dp = sc.nextLine().trim();
                    doInquiry(sp, dp, receivingBankF100);
                    break;
                }
                case "3": { // Payment
                    if(receivingBankF100==null) {
                        System.out.println("No receiving bank set!");
                        break;
                    }
                    System.out.print("sourcePan: ");
                    String sp = sc.nextLine().trim();
                    System.out.print("destPan: ");
                    String dp = sc.nextLine().trim();
                    System.out.print("amount: ");
                    long amt= Long.parseLong(sc.nextLine().trim());
                    doPayment(sp, dp, amt, receivingBankF100);
                    break;
                }
            }
        }
    }

    private static void doInquiry(String sourcePan, String destPan, String f100){
        String rc = checkLocalDebit(sourcePan, 0);
        if(!"00".equals(rc)) {
            System.out.println("[VCB] local fail => "+ rc);
            return;
        }
        try {
            ISOMsg iso = new ISOMsg();
            iso.setPackager(isoPackager);
            iso.setMTI("0200");
            iso.set(2, sourcePan);
            iso.set(3, "432020");
            iso.set(4, "000000000000"); // 12 chars
            iso.set(32, F32_THIS_BANK);
            iso.set(100, f100);
            iso.set(103, destPan);
            setF11F12F13(iso);

            IsoDebugHelper.debugIso("[VCB] => Napas (Inquiry)", iso);
            ISOMsg resp = sendAndWait(iso, 15000);
            if(resp==null) {
                System.out.println("[VCB] Timeout/no response => ???");
                return;
            }
            IsoDebugHelper.debugIso("[VCB] <= Napas (InquiryResp)", resp);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private static void doPayment(String sourcePan, String destPan, long amt, String f100) {
        String rc = checkLocalDebit(sourcePan, amt);
        if(!"00".equals(rc)) {
            System.out.println("[VCB] local fail => " + rc);
            return;
        }
        try {
            ISOMsg iso = new ISOMsg();
            iso.setPackager(isoPackager);
            iso.setMTI("0200");
            iso.set(2, sourcePan);
            iso.set(3, "912020");
            iso.set(4, String.format("%012d", amt));
            iso.set(32, F32_THIS_BANK);
            iso.set(100, f100);
            iso.set(103, destPan);
            setF11F12F13(iso);

            IsoDebugHelper.debugIso("[VCB] => Napas (Payment)", iso);
            ISOMsg resp = sendAndWait(iso, 15000);
            if(resp==null) {
                System.out.println("[VCB] Timeout => ???");
                return;
            }
            IsoDebugHelper.debugIso("[VCB] <= Napas (PaymentResp)", resp);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private static ISOMsg sendAndWait(ISOMsg iso, long timeoutMs) throws ISOException, IOException {
        String stan = iso.getString(11);
        if(stan==null) throw new ISOException("Missing f11 => cannot wait resp");

        CompletableFuture<ISOMsg> fut = new CompletableFuture<>();
        pendingRequests.put(stan, fut);

        IsoSocketUtils.sendIsoMessageWithHeader(out, iso);

        ScheduledExecutorService sch = Executors.newSingleThreadScheduledExecutor();
        sch.schedule(() -> {
            if(!fut.isDone()) fut.complete(null);
            sch.shutdown();
        }, timeoutMs, TimeUnit.MILLISECONDS);

        try {
            return fut.get(timeoutMs+1000, TimeUnit.MILLISECONDS);
        } catch(Exception e){
            return null;
        } finally {
            pendingRequests.remove(stan);
        }
    }

    // copy field i if present
    private static void copyIfPresent(ISOMsg src, ISOMsg dst, int i) throws ISOException {
        if(src.hasField(i)) {
            dst.set(i, src.getString(i));
        }
    }

    private static void setF11F12F13(ISOMsg iso) throws ISOException {
        iso.set(11, String.format("%06d", new Random().nextInt(999999)));
        LocalDateTime now = LocalDateTime.now();
        iso.set(12, now.format(DateTimeFormatter.ofPattern("HHmmss")));
        iso.set(13, now.format(DateTimeFormatter.ofPattern("MMdd")));
    }

    // simple local “debit” check
    private static String checkLocalDebit(String pan, long amt) {
        Account acc = ACCOUNTS.get(pan);
        if(acc==null) return "14";
        if(!"ACTIVE".equalsIgnoreCase(acc.status)) return "62";
        if(acc.balance < amt) return "51";
        // debit
        acc.balance -= amt;
        return "00";
    }

    // parse field(4) => numeric
    private static long parseAmount(ISOMsg iso) throws ISOException {
        if(!iso.hasField(4)) return 0;
        String s = iso.getString(4).replaceFirst("^0+","");
        if(s.isEmpty()) return 0;
        return Long.parseLong(s);
    }

    static class Account {
        String pan;
        long balance;
        String status;
        public Account(String p, long b, String s){
            this.pan = p;
            this.balance = b;
            this.status = s;
        }
    }
}
