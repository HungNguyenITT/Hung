package ZaloPay.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class ZaloPayService {
    private static final String BANK_CODE = "970403";
    // Địa chỉ API1 (cầu nối sang Napas), port=8081 tuỳ bạn
    private static final String API1_URL = "http://localhost:8081/api1";

    // DB local cho ZaloPay
    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        // Key = accountNumber (String)
        // Account(...) => (pan, balance, status)
        ACCOUNTS.put("101010", new Account("101010", 5000000L,"ACTIVE"));
        ACCOUNTS.put("999999", new Account("999999", 3000000L,"ACTIVE"));
        ACCOUNTS.put("777777", new Account("777777", 1000000L,"LOCKED"));
    }

    // ========== INQUIRY ==========
    public Map<String,String> processInquiry(Map<String,String> req) {
        logInbound("ZaloPay","/inquiry", req);

        // Standard hóa => F3=432020
        Map<String,String> st = standardizeRequest(req,"432020");

        Map<String,String> resp;
        // nếu F100 != 970403 => chuyển sang API1 => Napas => ...
        if(!BANK_CODE.equals(st.get("F100"))){
            resp = sendToApi1(st, "/inquiry");
        } else {
            // local check => so sánh F103
            String destAcct = st.getOrDefault("F103","");
            Account acc = ACCOUNTS.get(destAcct);
            // nếu acc==null => F39=14
            // nếu acc.getStatus()!=ACTIVE => F39=? (62)
            // ngược lại => 00
            String rc;
            if(acc == null) {
                rc = "14"; // invalid account
            } else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())) {
                rc = "62"; // locked
            } else {
                rc = "00"; 
            }

            resp = new HashMap<>(st);
            resp.put("F39", rc);
        }

        logOutbound("ZaloPay","/inquiry", st);
        logInbound("ZaloPay","/inquiryResp", resp);
        return resp;
    }

    // ========== PAYMENT ==========
    public Map<String,String> processPayment(Map<String,String> req) {
        logInbound("ZaloPay","/payment", req);

        // Standard => F3=912020
        Map<String,String> st = standardizeRequest(req,"912020");

        Map<String,String> resp;
        if(!BANK_CODE.equals(st.get("F100"))){
            // => forward sang API1
            resp = sendToApi1(st, "/payment");
        } else {
            // local => check F103
            String destAcct = st.getOrDefault("F103","");
            Account acc = ACCOUNTS.get(destAcct);

            String rc;
            if(acc == null) {
                rc = "14"; 
            } else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())) {
                rc = "62";
            } else {
                // “Nhận” tiền => ta có thể + balance. (tuỳ logic)
                // Ở demo cũ, ta hay làm “source side” => -balance
                // Nhưng theo yêu cầu “bank nhận => check F103”, 
                // => ta credit. Dưới đây minh hoạ:
                long amt = parseLongSafe(st.getOrDefault("F4","0"));
                acc.setBalance(acc.getBalance() + amt);
                rc = "00";
            }

            resp = new HashMap<>(st);
            resp.put("F39", rc);
        }

        logOutbound("ZaloPay","/payment", st);
        logInbound("ZaloPay","/paymentResp", resp);
        return resp;
    }

    // --------------------------------
    private Map<String,String> standardizeRequest(Map<String,String> req, String defPC){
        Map<String,String> st = new HashMap<>(req);
        if(!st.containsKey("F1")) st.put("F1","0200");
        if(!st.containsKey("F3")) st.put("F3", defPC);
        // F4 => 12char
        if(!st.containsKey("F4")){
            st.put("F4","000000000000");
        } else {
            long amt = parseLongSafe(st.get("F4"));
            st.put("F4", String.format("%012d", amt));
        }
        if(!st.containsKey("F11")){
            st.put("F11", String.format("%06d",(int)(Math.random()*1_000_000)));
        }
        if(!st.containsKey("F12")){
            st.put("F12", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
        }
        if(!st.containsKey("F13")){
            st.put("F13", LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")));
        }
        // F32=970403
        st.put("F32", BANK_CODE);
        // F100 if missing
        if(!st.containsKey("F100")) st.put("F100","");
        // F103 if missing but have destPan
        if(!st.containsKey("F103") && st.containsKey("destPan")){
            st.put("F103", st.get("destPan"));
        }
        return st;
    }

    private Map<String,String> sendToApi1(Map<String,String> st, String endpoint){
        String url = API1_URL + endpoint;
        System.out.println("[ZaloPay] => Outbound to API1 " + endpoint + ": " + JsonMapperUtil.toJson(st));

        String respJson = doHttpPost(url, JsonMapperUtil.toJson(st));
        if(respJson == null){
            Map<String,String> err=new HashMap<>(st);
            err.put("F39","96");
            return err;
        }
        return JsonMapperUtil.fromJson(respJson);
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try {
            URL u=new URL(url);
            conn=(HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);

            try(OutputStream out=conn.getOutputStream()){
                out.write(body.getBytes("UTF-8"));
            }

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            try(InputStream in=conn.getInputStream()){
                byte[] buf=new byte[4096];
                int len;
                while((len=in.read(buf))!=-1){
                    baos.write(buf,0,len);
                }
            }
            return baos.toString("UTF-8");
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }finally{
            if(conn!=null) conn.disconnect();
        }
    }

    private long parseLongSafe(String s){
        try{ return Long.parseLong(s); }catch(Exception e){ return 0; }
    }

    private void logInbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("================\n");
    }
    private void logOutbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("================\n");
    }

    private static class Account {
        private String pan;
        private long balance;
        private String status;
        public Account(String p,long b,String s){
            this.pan=p; this.balance=b; this.status=s;
        }
        public long getBalance(){return balance;}
        public void setBalance(long x){balance=x;}
        public String getStatus(){return status;}
    }
}
