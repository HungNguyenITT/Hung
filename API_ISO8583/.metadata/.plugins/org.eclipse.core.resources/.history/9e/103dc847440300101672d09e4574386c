package API2.controller;


import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.ISO87APackager;
import org.springframework.stereotype.Component;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;

import javax.annotation.PostConstruct;
import java.io.*;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.concurrent.*;
import java.util.HashMap;
import java.util.Map;

/**
 * API2 => connect Napas c=1515
 * inbound => iso->json => doHttpPost(NGANLUONG_URL...) => parse => iso=> respond
 */
@Component
public class API2SocketServer {

    private static final String NAPAS_HOST="localhost";
    private static final int NAPAS_PORT=1515; // Napas side => bank=970404

    private static final String NGANLUONG_URL="http://localhost:1112/ngl"; 
    // NganLuong server => /inquiry, /payment ?

    private Socket socket;
    private OutputStream out;
    private InputStream in;
    private final Map<String,CompletableFuture<ISOMsg>> pendingMap = new ConcurrentHashMap<>();
    private final ExecutorService readerThread= Executors.newSingleThreadExecutor();

    @PostConstruct
    public void start(){
        new Thread(new Runnable(){
            public void run(){
                connectNapas();
            }
        }).start();
    }

    private void connectNapas(){
        while(true){
            try{
                socket= new Socket(NAPAS_HOST, NAPAS_PORT);
                socket.setSoTimeout(0);
                out= socket.getOutputStream();
                in= socket.getInputStream();
                System.out.println("[API2] connected Napas => "+NAPAS_HOST+":"+NAPAS_PORT);

                startReadingLoop();
                break;
            } catch(Exception e){
                e.printStackTrace();
                System.err.println("[API2] connect fail => retry 5s...");
                try{Thread.sleep(5000);}catch(Exception ignore){}
            }
        }
    }

    private void startReadingLoop(){
        readerThread.submit(new Runnable(){
            public void run(){
                ISO87APackager packager=new ISO87APackager();
                while(true){
                    try {
                        ISOMsg iso=null;
                        try {
                            iso= IsoSocketUtils.readIsoMessageWithHeader(in,packager);
                        } catch(SocketTimeoutException te){
                            continue;
                        } catch(EOFException eof){
                            System.err.println("[API2] Napas disconnected");
                            break;
                        } catch(Exception e){
                            e.printStackTrace();
                            break;
                        }
                        if(iso==null){
                            System.out.println("[API2] read null => break");
                            break;
                        }
                        IsoDebugHelper.debugIso("[API2] inbound from Napas", iso);

                        String stan= iso.hasField(11)? iso.getString(11):null;
                        CompletableFuture<ISOMsg> fut= (stan==null)? null: pendingMap.remove(stan);
                        if(fut!=null){
                            fut.complete(iso);
                        } else {
                            // request => iso->json => doHttpPost => parse => iso => respond
                            handleInboundRequest(iso);
                        }
                    } catch(Exception e){
                        e.printStackTrace();
                        break;
                    }
                }
                System.out.println("[API2] readLoop ended => reconnect Napas?");
                closeSocket();
                connectNapas();
            }
        });
    }

    private void handleInboundRequest(ISOMsg req)throws Exception{
        // parse pc => /inquiry or /payment => doHttpPost => parse => iso => respond
        String pc= req.hasField(3)? req.getString(3):"";
        String endpoint;
        if("432020".equals(pc)) endpoint="/inquiry";
        else if("912020".equals(pc)) endpoint="/payment";
        else {
            ISOMsg e= createResponse(req,"96");
            sendMessage(e);
            return;
        }

        String src= req.hasField(2)? req.getString(2):"";
        String dst= req.hasField(103)? req.getString(103):"";
        long amt=0L;
        if(req.hasField(4)){
            String s=req.getString(4).replaceAll("^0+","");
            if(!s.isEmpty()) amt= Long.parseLong(s);
        }

        String body= "{\"sourcePan\":\""+src+"\",\"destPan\":\""+dst+"\",\"amount\":\""+amt+"\"}";
        String respJson= doHttpPost(NGANLUONG_URL + endpoint, body);
        if(respJson==null){
            ISOMsg e= createResponse(req,"68");
            sendMessage(e);
            return;
        }
        String rc="96";
        int idx= respJson.indexOf("\"field39\":\"");
        if(idx>=0){
            int st= idx+("\"field39\":\"".length());
            int ed= respJson.indexOf("\"", st);
            if(ed>st) rc= respJson.substring(st,ed);
        }
        ISOMsg r= createResponse(req, rc);
        sendMessage(r);
    }

    private ISOMsg createResponse(ISOMsg req, String rc)throws ISOException{
        ISOMsg iso=new ISOMsg();
        iso.setPackager(new ISO87APackager());
        int mtiIn= Integer.parseInt(req.getMTI());
        iso.setMTI(String.format("%04d", mtiIn+10));

        copyIfPresent(req, iso,2);
        copyIfPresent(req, iso,3);
        copyIfPresent(req, iso,4);
        copyIfPresent(req, iso,11);
        copyIfPresent(req, iso,12);
        copyIfPresent(req, iso,13);
        copyIfPresent(req, iso,32);
        copyIfPresent(req, iso,37);
        copyIfPresent(req, iso,100);
        copyIfPresent(req, iso,103);
        iso.set(39,rc);
        return iso;
    }

    private void copyIfPresent(ISOMsg f, ISOMsg t, int i)throws ISOException{
        if(f.hasField(i)){
            t.set(i, f.getString(i));
        }
    }

    private String doHttpPost(String url, String body){
        java.net.HttpURLConnection conn=null;
        try{
            java.net.URL u=new java.net.URL(url);
            conn=(java.net.HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            conn.connect();

            OutputStream oo= conn.getOutputStream();
            oo.write(body.getBytes("UTF-8"));
            oo.close();

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            InputStream inp= conn.getInputStream();
            byte[] buf=new byte[4096];
            int len;
            while((len=inp.read(buf))!=-1){
                baos.write(buf,0,len);
            }
            inp.close();
            return baos.toString("UTF-8");
        } catch(Exception e){
            e.printStackTrace();
        } finally {
            if(conn!=null) conn.disconnect();
        }
        return null;
    }

    public ISOMsg sendAndWaitResponse(ISOMsg iso, long timeoutMs)throws ISOException,IOException{
        // (Náº¿u "NganLuong => API2 => Napas" scenario)
        String stan= iso.hasField(11)? iso.getString(11): null;
        if(stan==null){
            throw new ISOException("[API2] missing f11");
        }
        CompletableFuture<ISOMsg> fut=new CompletableFuture<ISOMsg>();
        pendingMap.put(stan, fut);

        sendMessage(iso);

        if(timeoutMs>0){
            ScheduledExecutorService sch= Executors.newSingleThreadScheduledExecutor();
            sch.schedule(new Runnable(){
                public void run(){
                    if(!fut.isDone()) fut.complete(null);
                    sch.shutdown();
                }
            }, timeoutMs, TimeUnit.MILLISECONDS);
        }
        try{
            return fut.get(timeoutMs+500, TimeUnit.MILLISECONDS);
        } catch(Exception e){
            return null;
        } finally {
            pendingMap.remove(stan);
        }
    }

    public void sendMessage(ISOMsg iso)throws ISOException,IOException{
        IsoDebugHelper.debugIso("[API2] => Napas", iso);
        IsoSocketUtils.sendIsoMessageWithHeader(out, iso);
        out.flush();
    }

    private void closeSocket(){
        try{
            if(socket!=null) socket.close();
        } catch(Exception e){
            e.printStackTrace();
        }
    }
}
