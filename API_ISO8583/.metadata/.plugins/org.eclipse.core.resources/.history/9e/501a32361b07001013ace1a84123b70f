package NganLuong.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class NganLuongService {
    private static final String BANK_CODE = "970404";
    private static final String API2_URL = "http://localhost:8085/api2";

    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("101010", new Account("101010",9000000L,"ACTIVE"));
        ACCOUNTS.put("121212", new Account("121212",2000000L,"ACTIVE"));
        ACCOUNTS.put("131313", new Account("131313",5000000L,"LOCKED"));
    }

    // ========== Inquiry ==========
    public Map<String, String> processInquiry(Map<String,String> req){
        logInbound("NganLuong","/inquiry", req);
        prepareMandatoryFields(req,"432020");

        Map<String,String> resp;
        String targetBank = req.getOrDefault("F100","");
        // nếu bank đích != 970404 => forward sang API2 => (API2->Napas)
        if(!BANK_CODE.equals(targetBank)){
            System.out.println("[NganLuong] => inquiry => API2, F100="+targetBank);
            resp = sendToApi2(req, "/inquiry");
        } else {
            // local
            String pan=req.getOrDefault("F2","");
            Account acc=ACCOUNTS.get(pan);
            String rc= (acc==null || !"ACTIVE".equalsIgnoreCase(acc.getStatus()))? "14":"00";
            resp=new HashMap<>(req);
            resp.put("F39",rc);
        }

        logOutbound("NganLuong","/inquiry",req);
        logInbound("NganLuong","/inquiryResp", resp);
        return resp;
    }

    // ========== Payment ==========
    public Map<String, String> processPayment(Map<String,String> req){
        logInbound("NganLuong","/payment", req);
        prepareMandatoryFields(req,"912020");

        Map<String,String> resp;
        String targetBank=req.getOrDefault("F100","");
        if(!BANK_CODE.equals(targetBank)){
            System.out.println("[NganLuong] => payment => API2, F100="+targetBank);
            resp= sendToApi2(req,"/payment");
        } else {
            // local
            String pan=req.getOrDefault("F2","");
            long amt=parseLongSafe(req.getOrDefault("F4","0"));
            Account acc=ACCOUNTS.get(pan);
            String rc=(acc==null)? "14":
                       (!"ACTIVE".equalsIgnoreCase(acc.getStatus()))? "62":
                       (acc.getBalance()<amt)? "51":"00";
            if("00".equals(rc)) acc.setBalance(acc.getBalance()-amt);

            resp=new HashMap<>(req);
            resp.put("F39",rc);
        }

        logOutbound("NganLuong","/payment",req);
        logInbound("NganLuong","/paymentResp",resp);
        return resp;
    }

    // --------------------------------------------------
    // Bổ sung trường F1,F2,F3,F4,F11,F12,F13,F32=970404
    private void prepareMandatoryFields(Map<String,String> req, String defaultPC){
        unifyKeysUppercase(req);

        if(!req.containsKey("F1")){
            req.put("F1","0200");
        }
        if(!req.containsKey("F2") && req.containsKey("SOURCEPAN")){
            req.put("F2", req.get("SOURCEPAN"));
        }
        if(!req.containsKey("F3")){
            req.put("F3", defaultPC);
        }

        if(!req.containsKey("F4") && req.containsKey("AMOUNT")){
            req.put("F4", req.get("AMOUNT"));
        }
        if(!req.containsKey("F4")){
            req.put("F4","000000000000");
        } else {
            long amt = parseLongSafe(req.get("F4"));
            req.put("F4", String.format("%012d", amt));
        }

        if(!req.containsKey("F11")){
            req.put("F11", String.format("%06d",(int)(Math.random()*1000000)));
        }
        if(!req.containsKey("F12")){
            req.put("F12", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
        }
        if(!req.containsKey("F13")){
            req.put("F13", LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")));
        }
        // Bank code = 970404
        req.put("F32", BANK_CODE);

        if(!req.containsKey("F100")){
            req.put("F100","");
        }
        // F103 => if missing but have destPan
        if(!req.containsKey("F103") && req.containsKey("DESTPAN")){
            req.put("F103", req.get("DESTPAN"));
        }
    }

    private void unifyKeysUppercase(Map<String,String> req){
        Map<String,String> tmp=new HashMap<>();
        for(String k: req.keySet()){
            tmp.put(k.toUpperCase(), req.get(k));
        }
        req.clear();
        req.putAll(tmp);
    }

    private Map<String,String> sendToApi2(Map<String,String> j, String endpoint){
        String url= API2_URL+endpoint;
        System.out.println("=== [NganLuong] => Outbound to API2 "+endpoint+" ===");
        System.out.println(JsonMapperUtil.toJson(j));

        String respJson= doHttpPost(url, JsonMapperUtil.toJson(j));
        if(respJson==null){
            System.err.println("[NganLuong] No response from API2 => F39=96");
            Map<String,String> err=new HashMap<>(j);
            err.put("F39","96");
            return err;
        }
        return JsonMapperUtil.fromJson(respJson);
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try{
            URL u=new URL(url);
            conn=(HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);

            OutputStream out=conn.getOutputStream();
            out.write(body.getBytes("UTF-8"));
            out.flush();
            out.close();

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            InputStream in=conn.getInputStream();
            byte[] buf=new byte[4096];
            int len;
            while((len=in.read(buf))!=-1){
                baos.write(buf,0,len);
            }
            in.close();
            return baos.toString("UTF-8");
        } catch(Exception e){
            e.printStackTrace();
            return null;
        } finally{
            if(conn!=null) conn.disconnect();
        }
    }

    private long parseLongSafe(String s){
        try{return Long.parseLong(s);}catch(Exception e){return 0;}
    }

    private void logInbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)->System.out.println(k+"="+v));
        System.out.println("==========\n");
    }
    private void logOutbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)->System.out.println(k+"="+v));
        System.out.println("==========\n");
    }

    private static class Account {
        private String pan;
        private long balance;
        private String status;
        public Account(String p, long b, String s){
            pan=p; balance=b; status=s;
        }
        public long getBalance(){return balance;}
        public void setBalance(long x){balance=x;}
        public String getStatus(){return status;}
    }
}
