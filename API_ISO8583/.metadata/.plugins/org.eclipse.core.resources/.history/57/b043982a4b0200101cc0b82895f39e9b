package API2.controller;


import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.ISO87APackager;
import org.springframework.stereotype.Component;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;

import javax.annotation.PostConstruct;
import java.io.*;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Map;
import java.util.concurrent.*;

@Component
public class API2SocketServer {

    private static final String NAPAS_HOST="localhost";
    private static final int NAPAS_PORT=1515; // Napas server c=1515 => bank=970404 => API2 is client

    private Socket socket;
    private OutputStream out;
    private InputStream in;

    private final Map<String,CompletableFuture<ISOMsg>> pendingMap = new ConcurrentHashMap<>();
    private final ExecutorService readerThread = Executors.newSingleThreadExecutor();

    @PostConstruct
    public void start(){
        new Thread(new Runnable(){
            public void run(){
                connectNapas();
            }
        }).start();
    }

    private void connectNapas(){
        while(true){
            try {
                socket= new Socket(NAPAS_HOST,NAPAS_PORT);
                socket.setSoTimeout(0); // indefinite
                out= socket.getOutputStream();
                in=  socket.getInputStream();

                System.out.println("[API2] Connected Napas => "+NAPAS_HOST+":"+NAPAS_PORT);
                startReadingLoop();
                break;
            } catch(Exception e){
                e.printStackTrace();
                System.err.println("[API2] connect fail => retry 5s...");
                try{Thread.sleep(5000);}catch(InterruptedException ignore){}
            }
        }
    }

    private void startReadingLoop(){
        readerThread.submit(new Runnable(){
            public void run(){
                ISO87APackager packager=new ISO87APackager();
                while(true){
                    try {
                        ISOMsg iso=null;
                        try {
                            iso= IsoSocketUtils.readIsoMessageWithHeader(in, packager);
                        } catch(SocketTimeoutException te){
                            continue;
                        } catch(EOFException eof){
                            System.err.println("[API2] Napas disconnected");
                            break;
                        } catch(Exception e){
                            e.printStackTrace();
                            break;
                        }
                        if(iso==null){
                            System.out.println("[API2] read null => break");
                            break;
                        }
                        IsoDebugHelper.debugIso("[API2] Inbound from Napas", iso);

                        String stan= iso.hasField(11)? iso.getString(11): null;
                        if(stan!=null && pendingMap.containsKey(stan)){
                            // response for pending
                            CompletableFuture<ISOMsg> fut= pendingMap.remove(stan);
                            if(fut!=null) fut.complete(iso);
                        } else {
                            // new request => call inbound handle
                            handleInboundRequest(iso);
                        }
                    } catch(Exception e){
                        e.printStackTrace();
                        break;
                    }
                }
                System.out.println("[API2] readLoop ended => reconnect Napas?");
                closeSocket();
                connectNapas();
            }
        });
    }

    private void handleInboundRequest(ISOMsg req) throws ISOException,IOException{
        // Táº¡o resp=00
        ISOMsg resp=new ISOMsg();
        resp.setPackager(new ISO87APackager());
        int mti=Integer.parseInt(req.getMTI());
        resp.setMTI(String.format("%04d", mti+10));

        copyIfPresent(req, resp,2);
        copyIfPresent(req, resp,3);
        copyIfPresent(req, resp,4);
        copyIfPresent(req, resp,11);
        copyIfPresent(req, resp,12);
        copyIfPresent(req, resp,13);
        copyIfPresent(req, resp,32);
        copyIfPresent(req, resp,100);
        copyIfPresent(req, resp,103);
        resp.set(39,"00");

        IsoDebugHelper.debugIso("[API2] inboundReq => respond Napas=00", resp);
        sendMessage(resp);
    }

    public ISOMsg sendAndWaitResponse(ISOMsg iso, long timeoutMs) throws ISOException,IOException{
        if(!iso.hasField(11)){
            throw new ISOException("[API2] missing field(11) => cannot match response");
        }
        String stan= iso.getString(11);
        CompletableFuture<ISOMsg> fut=new CompletableFuture<ISOMsg>();
        pendingMap.put(stan, fut);

        sendMessage(iso);

        if(timeoutMs>0){
            ScheduledExecutorService sche= Executors.newSingleThreadScheduledExecutor();
            sche.schedule(new Runnable(){
                public void run(){
                    if(!fut.isDone()){
                        fut.complete(null);
                    }
                    sche.shutdown();
                }
            }, timeoutMs, TimeUnit.MILLISECONDS);
        }

        try{
            return fut.get(timeoutMs+500, TimeUnit.MILLISECONDS);
        } catch(Exception e){
            return null;
        } finally {
            pendingMap.remove(stan);
        }
    }

    public void sendMessage(ISOMsg iso)throws ISOException,IOException{
        IsoDebugHelper.debugIso("[API2] => Napas", iso);
        IsoSocketUtils.sendIsoMessageWithHeader(out, iso);
        out.flush();
    }

    private void closeSocket(){
        try{ if(socket!=null) socket.close(); }catch(Exception ignore){}
    }

    private void copyIfPresent(ISOMsg f, ISOMsg t, int i)throws ISOException{
        if(f.hasField(i)){
            t.set(i, f.getString(i));
        }
    }
}
