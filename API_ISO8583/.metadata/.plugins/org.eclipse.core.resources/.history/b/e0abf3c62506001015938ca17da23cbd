package API1.service;

import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;
import utils.LogHelper;
import org.springframework.stereotype.Service;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class Api1Service {
    private static final String NAPAS_HOST = "localhost";
    private static final int NAPAS_PORT = 1414;
    private static GenericPackager packager;

    static {
        try {
            InputStream is = Api1Service.class.getResourceAsStream("/iso87binary.xml");
            if (is == null) {
                throw new RuntimeException("File iso87binary.xml not found in resources.");
            }
            packager = new GenericPackager(is);
            System.out.println("GenericPackager initialized successfully for Api1Service.");
        } catch (Exception e) {
            System.err.println("Error initializing GenericPackager: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public Map<String, String> handleInquiry(Map<String, String> jsonMap) throws Exception {
        logInbound("API1", "/inquiry", jsonMap);
        // Chuẩn hóa request ISO: các trường F1, F2, F3, F4, F11, F12, F13, F32, F100, F103
        Map<String, String> isoReq = prepareISORequest(jsonMap, "432020", "970403");
        logIsoOutbound("API1", "inquiry => Napas", isoReq);
        ISOMsg isoMsg = mapToIso(isoReq);
        ISOMsg responseIso = sendAndReceiveIso(isoMsg);
        Map<String, String> response = isoToJson(responseIso);
        logInbound("API1", "/inquiryResp", response);
        return response;
    }

    public Map<String, String> handlePayment(Map<String, String> jsonMap) throws Exception {
        logInbound("API1", "/payment", jsonMap);
        Map<String, String> isoReq = prepareISORequest(jsonMap, "912020", "970403");
        logIsoOutbound("API1", "payment => Napas", isoReq);
        ISOMsg isoMsg = mapToIso(isoReq);
        ISOMsg responseIso = sendAndReceiveIso(isoMsg);
        Map<String, String> response = isoToJson(responseIso);
        logInbound("API1", "/paymentResp", response);
        return response;
    }

    // Chuyển map ISO request thành ISOMsg
    private ISOMsg mapToIso(Map<String, String> isoReq) throws Exception {
        ISOMsg iso = new ISOMsg();
        iso.setPackager(packager);
        // Các key đã là F1, F2, … rồi
        for (Map.Entry<String, String> entry : isoReq.entrySet()) {
            String key = entry.getKey();
            if ("F1".equals(key)) {
                iso.setMTI(entry.getValue());
            } else if (key.startsWith("F")) {
                try {
                    int fieldNum = Integer.parseInt(key.substring(1));
                    iso.set(fieldNum, entry.getValue());
                } catch (NumberFormatException nfe) {
                    System.err.println("Invalid field key: " + key);
                }
            }
        }
        return iso;
    }

    private Map<String, String> prepareISORequest(Map<String, String> req, String defaultPC, String fixedF32) {
        Map<String, String> isoReq = new HashMap<>();
        // Vì JSON đã chứa các key F1, F2, F3, F4, F100, F103 nếu có, chỉ cần chuyển sang chữ hoa
        for (Map.Entry<String, String> entry : req.entrySet()) {
            isoReq.put(entry.getKey().toUpperCase(), entry.getValue());
        }
        if (!isoReq.containsKey("F1")) {
            isoReq.put("F1", "0200");
        }
        if (!isoReq.containsKey("F2")) {
            isoReq.put("F2", "");
        }
        if (!isoReq.containsKey("F3")) {
            isoReq.put("F3", defaultPC);
        }
        if (!isoReq.containsKey("F4")) {
            isoReq.put("F4", "000000000000");
        } else {
            try {
                long amt = Long.parseLong(isoReq.get("F4"));
                isoReq.put("F4", String.format("%012d", amt));
            } catch(Exception e) {
                isoReq.put("F4", "000000000000");
            }
        }
        isoReq.put("F32", fixedF32);
        if (!isoReq.containsKey("F100")) {
            isoReq.put("F100", "");
        }
        if (!isoReq.containsKey("F103") && req.containsKey("F103")) {
            isoReq.put("F103", req.get("F103").toUpperCase());
        }
        if (!isoReq.containsKey("F11")) {
            isoReq.put("F11", String.format("%06d", (int)(Math.random()*1000000)));
        }
        if (!isoReq.containsKey("F12")) {
            isoReq.put("F12", new SimpleDateFormat("HHmmss").format(new Date()));
        }
        if (!isoReq.containsKey("F13")) {
            isoReq.put("F13", new SimpleDateFormat("MMdd").format(new Date()));
        }
        return isoReq;
    }

    private ISOMsg sendAndReceiveIso(ISOMsg isoMsg) throws Exception {
        try (java.net.Socket socket = new java.net.Socket(NAPAS_HOST, NAPAS_PORT)) {
            socket.setSoTimeout(10000);
            InputStream in = socket.getInputStream();
            OutputStream out = socket.getOutputStream();
            System.out.println("[Api1Service] Sending ISO message to Napas on port " + NAPAS_PORT);
            byte[] packed = isoMsg.pack();
            System.out.println("[Api1Service] Packed message length: " + packed.length);
            IsoSocketUtils.sendIsoMessageWithHeader(out, isoMsg);
            Thread.sleep(100);
            ISOMsg response = IsoSocketUtils.readIsoMessageWithHeader(in, packager);
            System.out.println("[Api1Service] Received response from Napas");
            return response;
        }
    }

    private Map<String, String> isoToJson(ISOMsg iso) throws Exception {
        Map<String, String> jsonMap = new HashMap<>();
        if (iso == null) {
            jsonMap.put("F39", "96");
            return jsonMap;
        }
        jsonMap.put("F1", iso.getMTI());
        for (int i = 1; i <= 128; i++) {
            if (iso.hasField(i)) {
                jsonMap.put("F" + i, iso.getString(i));
            }
        }
        return jsonMap;
    }

    private void logInbound(String service, String path, Map<String, String> data) {
        System.out.println("=== [" + service + "] Inbound " + path + " ===");
        data.forEach((k, v) -> System.out.println(k + "=" + v));
        System.out.println("==========");
    }

    private void logIsoOutbound(String service, String path, Map<String, String> data) {
        System.out.println("=== [" + service + "] " + path + " ===");
        // Log map ISO request
        data.forEach((k, v) -> System.out.println(k + "=" + v));
        System.out.println("==========");
    }

    private void logInbound(String service, String path, ISOMsg iso) {
        System.out.println("=== [" + service + "] Inbound " + path + " ===");
        IsoDebugHelper.debugIso(service + " IN", iso);
        LogHelper.logToBothBanks(iso, "IN");
    }

    private void logOutbound(String service, String path, ISOMsg iso) {
        System.out.println("=== [" + service + "] Outbound " + path + " ===");
        IsoDebugHelper.debugIso(service + " OUT", iso);
        LogHelper.logToBothBanks(iso, "OUT");
    }
}
