package API2.service;

import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import org.jpos.iso.packager.ISO87APackager;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;
import utils.LogHelper;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class Api2Service {
    private static final String NAPAS_HOST = "localhost";
    private static final int NAPAS_PORT = 1515;
    private static GenericPackager packager;
    private static NapasConnectionManager connectionManager;

    static {
        try {
            InputStream is = Api2Service.class.getResourceAsStream("/iso87binary.xml");
            if (is == null) {
                throw new RuntimeException("File iso87binary.xml not found in resources.");
            }
            packager = new GenericPackager(is);
            System.out.println("GenericPackager initialized successfully for Api2Service.");
            connectionManager = new NapasConnectionManager(NAPAS_HOST, NAPAS_PORT, packager);
        } catch (Exception e) {
            System.err.println("Error initializing Api2Service: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public Map<String, String> handleInquiry(Map<String, String> jsonMap) throws Exception {
        logInbound("API2", "/inquiry", jsonMap);

        ISOMsg isoMsg = jsonToIso(jsonMap);
        logIsoOutbound("API2", "inquiry => Napas", isoMsg);

        ISOMsg responseIso = connectionManager.sendAndReceive(isoMsg);
        logIsoInbound("API2", "inquiryResp <= Napas", responseIso);

        Map<String, String> response = isoToJson(responseIso);
        logInbound("API2", "/inquiryResp", response);
        return response;
    }

    public Map<String, String> handlePayment(Map<String, String> jsonMap) throws Exception {
        logInbound("API2", "/payment", jsonMap);

        ISOMsg isoMsg = jsonToIso(jsonMap);
        logIsoOutbound("API2", "payment => Napas", isoMsg);

        ISOMsg responseIso = connectionManager.sendAndReceive(isoMsg);
        logIsoInbound("API2", "paymentResp <= Napas", responseIso);

        Map<String, String> response = isoToJson(responseIso);
        logInbound("API2", "/paymentResp", response);
        return response;
    }

    private ISOMsg jsonToIso(Map<String, String> jsonMap) throws Exception {
        ISOMsg iso = new ISOMsg();
        iso.setPackager(packager);
        if (!jsonMap.containsKey("MTI")) {
            iso.setMTI("0200");
        }
        for (Map.Entry<String, String> entry : jsonMap.entrySet()) {
            String key = entry.getKey();
            if ("MTI".equals(key)) {
                iso.setMTI(entry.getValue());
            } else if (key.startsWith("F")) {
                int fieldNum = Integer.parseInt(key.substring(1));
                iso.set(fieldNum, entry.getValue());
            }
        }
        if (!iso.hasField(11)) {
            iso.set(11, String.format("%06d", (int)(Math.random()*1000000)));
        }
        if (!iso.hasField(12)) {
            iso.set(12, new SimpleDateFormat("HHmmss").format(new Date()));
        }
        if (!iso.hasField(13)) {
            iso.set(13, new SimpleDateFormat("MMdd").format(new Date()));
        }
        return iso;
    }

    private Map<String, String> isoToJson(ISOMsg iso) throws Exception {
        Map<String, String> jsonMap = new HashMap<>();
        if (iso == null) {
            jsonMap.put("F39", "96");
            return jsonMap;
        }
        jsonMap.put("MTI", iso.getMTI());
        for (int i = 1; i <= 128; i++) {
            if (iso.hasField(i)) {
                jsonMap.put("F" + i, iso.getString(i));
            }
        }
        return jsonMap;
    }

    private void logInbound(String service, String path, Map<String, String> data) {
        System.out.println("=== [" + service + "] Inbound " + path + " ===");
        data.forEach((k, v) -> System.out.println(k + "=" + v));
        System.out.println("==========");
    }

    private void logIsoOutbound(String service, String path, ISOMsg isoMsg) {
        System.out.println("=== [" + service + "] " + path + " ===");
        IsoDebugHelper.debugIso(service + " OUT", isoMsg);
        LogHelper.logToBothBanks(isoMsg, "OUT");
    }

    private void logIsoInbound(String service, String path, ISOMsg isoMsg) {
        System.out.println("=== [" + service + "] " + path + " ===");
        IsoDebugHelper.debugIso(service + " IN", isoMsg);
        LogHelper.logToBothBanks(isoMsg, "IN");
    }
}
