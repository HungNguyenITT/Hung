package Napas.server;

import Napas.entity.NapasMessage;
import Napas.repository.NapasMessageRepository;
import Napas.service.PortConfigService;
import org.jpos.iso.*;
import org.jpos.iso.packager.ISO87APackager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import utils.IsoSocketUtils;
import utils.LogHelper;

import javax.annotation.PostConstruct;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.concurrent.*;

@Component
public class SocketServer implements Runnable {

    @Autowired
    private PortConfigService portConfig;

    @Autowired
    private NapasMessageRepository repo;

    private ConcurrentMap<String, BankConnectionHandler> bankHandlers = new ConcurrentHashMap<>();
    private ExecutorService executor = Executors.newCachedThreadPool();
    private Map<String, ServerSocket> serverSockets = new ConcurrentHashMap<>();
    private boolean running = true;

    @PostConstruct
    public void init() {
        new Thread(this).start();
    }

    @Override
    public void run() {
        while (running) {
            try {
                refreshListeningPorts();
                Thread.sleep(15000);
            } catch (Exception e) {
                System.err.println("[SocketServer] Error in refresh loop: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void refreshListeningPorts() {
        Map<String, Integer> pm = portConfig.getPortMap();

        for (Map.Entry<String, ServerSocket> e : serverSockets.entrySet()) {
            String bankCode = e.getKey();
            ServerSocket ss = e.getValue();
            Integer newPort = pm.get(bankCode);
            if (newPort == null || ss.getLocalPort() != newPort) {
                System.out.println("[Napas] Closing old server for bank=" + bankCode);
                try {
                    ss.close();
                } catch (Exception ignore) {}
                serverSockets.remove(bankCode);
            }
        }

        for (Map.Entry<String, Integer> e : pm.entrySet()) {
            String bankCode = e.getKey();
            int port = e.getValue();
            if (!serverSockets.containsKey(bankCode)) {
                executor.submit(() -> startServerForBank(bankCode, port));
            }
        }
    }

    private void startServerForBank(String bankCode, int port) {
        ServerSocket ss = null;
        try {
            ss = new ServerSocket(port);
            serverSockets.put(bankCode, ss);
            System.out.println("[Napas] Listening on port=" + port + " for bank=" + bankCode);

            while (true) {
                Socket client = ss.accept();
                System.out.println("[Napas] Bank=" + bankCode + " connected from " + client.getRemoteSocketAddress());

                BankConnectionHandler handler = new BankConnectionHandler(client, bankCode, this);
                bankHandlers.put(bankCode, handler);
            }
        } catch (IOException io) {
            System.err.println("[Napas] Error for bank=" + bankCode + ", port=" + port + " => " + io.getMessage());
        } finally {
            if (ss != null) {
                try {
                    ss.close();
                } catch (Exception ignore) {}
            }
        }
    }

    public void onInboundMessage(ISOMsg iso, String fromBank) {
        try {
            System.out.println("[SocketServer] Processing inbound message from bank=" + fromBank);
            LogHelper.logToBothBanks(iso, "[Napas] Received from bank=" + fromBank);
            NapasMessage reqEntity = createEntity("REQUEST", iso);
            repo.save(reqEntity);

            String targetBank = iso.hasField(100) ? iso.getString(100) : null;
            if (targetBank == null) {
                System.err.println("[SocketServer] No target bank (F100) found in message from bank=" + fromBank);
                ISOMsg errResp = buildTimeoutResponse(iso, "68");
                respond(errResp, fromBank);
                return;
            }

            BankConnectionHandler destHandler = bankHandlers.get(targetBank);
            if (destHandler == null) {
                System.err.println("[SocketServer] Target bank=" + targetBank + " not connected for message from bank=" + fromBank);
                ISOMsg errResp = buildTimeoutResponse(iso, "68");
                respond(errResp, fromBank);
                return;
            }

            System.out.println("[SocketServer] Forwarding message from bank=" + fromBank + " to bank=" + targetBank);
            CompletableFuture<ISOMsg> future = destHandler.sendAndWaitResponse(iso, 15000);
            ISOMsg resp = future.get(15, TimeUnit.SECONDS);
            if (resp == null) {
                System.err.println("[SocketServer] Timeout waiting for response from bank=" + targetBank);
                ISOMsg toResp = buildTimeoutResponse(iso, "68");
                respond(toResp, fromBank);
            } else {
                System.out.println("[SocketServer] Received response from bank=" + targetBank + ", forwarding to bank=" + fromBank);
                respond(resp, fromBank);
            }
        } catch (Exception e) {
            System.err.println("[SocketServer] Error processing inbound message from bank=" + fromBank + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void respond(ISOMsg isoResp, String toBank) throws Exception {
        System.out.println("[SocketServer] Sending response to bank=" + toBank);
        LogHelper.logToBothBanks(isoResp, "[Napas] Response to bank=" + toBank);
        NapasMessage respEntity = createEntity("RESPONSE", isoResp);
        repo.save(respEntity);

        BankConnectionHandler h = bankHandlers.get(toBank);
        if (h != null) {
            h.sendMessage(isoResp);
        } else {
            System.err.println("[Napas] Cannot respond => bankHandler not found for " + toBank);
        }
    }

    private ISOMsg buildTimeoutResponse(ISOMsg req, String rc) {
        try {
            ISOMsg r = new ISOMsg();
            r.setPackager(new ISO87APackager());
            int mti = Integer.parseInt(req.getMTI());
            r.setMTI(String.format("%04d", mti + 10));
            copyIfPresent(req, r, 2);
            copyIfPresent(req, r, 3);
            copyIfPresent(req, r, 4);
            copyIfPresent(req, r, 11);
            copyIfPresent(req, r, 12);
            copyIfPresent(req, r, 13);
            copyIfPresent(req, r, 32);
            copyIfPresent(req, r, 100);
            copyIfPresent(req, r, 103);
            r.set(39, rc);
            return r;
        } catch (Exception e) {
            System.err.println("[SocketServer] Error building timeout response: " + e.getMessage());
            return null;
        }
    }

    private NapasMessage createEntity(String type, ISOMsg iso) throws ISOException {
        NapasMessage n = new NapasMessage();
        n.setType(type);
        n.setF1(iso.getMTI());
        if (iso.hasField(2)) n.setF2(iso.getString(2));
        if (iso.hasField(3)) n.setF3(iso.getString(3));
        if (iso.hasField(4)) n.setF4(iso.getString(4));
        if (iso.hasField(11)) n.setF11(iso.getString(11));
        if (iso.hasField(12)) n.setF12(iso.getString(12));
        if (iso.hasField(13)) n.setF13(iso.getString(13));
        if (iso.hasField(32)) n.setF32(iso.getString(32));
        if (iso.hasField(39)) n.setF39(iso.getString(39));
        if (iso.hasField(100)) n.setF100(iso.getString(100));
        if (iso.hasField(103)) n.setF103(iso.getString(103));
        return n;
    }

    private void copyIfPresent(ISOMsg from, ISOMsg to, int i) throws ISOException {
        if (from.hasField(i)) {
            to.set(i, from.getString(i));
        }
    }
}