package BankPLAPI;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class BankPhatLenhAPI {

    // Tài khoản gửi cục bộ
    private static final Map<String, Account> ACCOUNTS_SOURCE = new HashMap<>();
    static {
        ACCOUNTS_SOURCE.put("111111", new Account("111111", 2_000_000L, "ACTIVE"));
        ACCOUNTS_SOURCE.put("222222", new Account("222222", 1_000_000L, "ACTIVE"));
        ACCOUNTS_SOURCE.put("333333", new Account("333333", 5_000_000L, "LOCKED"));
    }

    // Lưu cặp (source,dest) sau inquiry => để tránh mismatch Payment
    private String lastSource = null;
    private String lastDest   = null;

    // Địa chỉ Endpoint API1
    private static final String API1_URL = "http://localhost:8081/api/isoRequest";

    // Cổng inbound socket cho “đường về”
    private static final int INBOUND_SOCKET_PORT = 9098;

    public static void main(String[] args) {
        BankPhatLenhAPI app = new BankPhatLenhAPI();

        // 1) Start inbound socket => nhận phản hồi (đường về) từ API1
        app.startInboundSocket();

        // 2) Mở menu CLI => Inquiry/Payment
        app.runMenu();
    }

    // ----------------------------------------------------------------
    // 1) Menu CLI => inquiry/payment
    private void runMenu() {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n=== BankPhatLenhAPI ===");
            System.out.println("1. Inquiry (432020)");
            System.out.println("2. Payment (912020)");
            System.out.println("0. Exit");
            System.out.print("Chọn: ");
            String choice = sc.nextLine().trim();
            if ("0".equals(choice)) {
                System.out.println("Kết thúc.");
                break;
            }

            System.out.print("sourcePan: ");
            String sPan = sc.nextLine().trim();
            System.out.print("destPan: ");
            String dPan = sc.nextLine().trim();

            if ("1".equals(choice)) {
                doInquiry(sPan, dPan);
            } else if ("2".equals(choice)) {
                System.out.print("amount: ");
                long amt = Long.parseLong(sc.nextLine().trim());
                doPayment(sPan, dPan, amt);
            } else {
                System.out.println("Lựa chọn không hợp lệ!");
            }
        }
    }

    // ----------------------------------------------------------------
    // 2) Inquiry => check source => post JSON => API1 => get JSON resp
    private void doInquiry(String sourcePan, String destPan) {
        // cục bộ check source
        String rc = checkSource(sourcePan, 0L, false);
        if (!"00".equals(rc)) {
            System.out.println("[BankPhatLenhAPI] inquiry => field39=" + rc + " (source fail)");
            return;
        }

        // build JSON => post -> API1
        String jsonReq = "{\"mti\":\"0200\",\"processingCode\":\"432020\","
                + "\"sourcePan\":\"" + sourcePan + "\","
                + "\"destinationPan\":\"" + destPan + "\","
                + "\"transactionAmount\":\"0\"}";

        String resp = postJson(API1_URL, jsonReq);
        System.out.println("[BankPhatLenhAPI] inquiry => respJSON=" + resp);

        if (resp.contains("\"responseCode\":\"00\"")) {
            // store cặp inquiry
            lastSource = sourcePan;
            lastDest   = destPan;
        }
    }

    // ----------------------------------------------------------------
    // 3) Payment => check + trừ local => post JSON => API1 => ...
    private void doPayment(String sourcePan, String destPan, long amt) {
        // optional chặn mismatch
        if (!matchInquiry(sourcePan, destPan)) {
            System.out.println("[BankPhatLenhAPI] mismatch => field39=94");
            return;
        }

        // local check source + trừ
        String rc = checkSource(sourcePan, amt, true);
        if (!"00".equals(rc)) {
            System.out.println("[BankPhatLenhAPI] payment => field39=" + rc + " (source fail)");
            return;
        }

        // build JSON => post -> API1
        String amtStr = String.format("%012d", amt);
        String jsonReq = "{\"mti\":\"0200\",\"processingCode\":\"912020\","
                + "\"sourcePan\":\"" + sourcePan + "\","
                + "\"destinationPan\":\"" + destPan + "\","
                + "\"transactionAmount\":\"" + amtStr + "\"}";

        String resp = postJson(API1_URL, jsonReq);
        System.out.println("[BankPhatLenhAPI] payment => respJSON=" + resp);

        if (!resp.contains("\"responseCode\":\"00\"")) {
            // rollback?
        } else {
            // success => clear cặp
            lastSource = null;
            lastDest   = null;
        }
    }

    // ----------------------------------------------------------------
    // cục bộ check source => inquiry => check locked; payment => check balance + trừ
    private String checkSource(String pan, long amt, boolean isPayment) {
        Account a = ACCOUNTS_SOURCE.get(pan);
        if (a == null) return "14";
        if (!"ACTIVE".equalsIgnoreCase(a.status)) return "62";
        if (isPayment) {
            if (a.balance < amt) return "51";
            a.balance -= amt;
        }
        return "00";
    }

    private boolean matchInquiry(String sPan, String dPan) {
        if (lastSource == null || lastDest == null) return false;
        return (lastSource.equals(sPan) && lastDest.equals(dPan));
    }

    // ----------------------------------------------------------------
    // postJson => HTTP => API1
    private String postJson(String urlStr, String body) {
        HttpURLConnection conn=null;
        try {
            URL url = new URL(urlStr);
            conn=(HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.connect();

            try(OutputStream out=conn.getOutputStream()){
                out.write(body.getBytes("UTF-8"));
            }

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            try(InputStream in=conn.getInputStream()){
                byte[] buf=new byte[4096];
                int len;
                while((len=in.read(buf))!=-1){
                    baos.write(buf,0,len);
                }
            }
            return baos.toString("UTF-8");
        } catch(Exception e) {
            e.printStackTrace();
            return "{\"error\":\""+ e.getMessage()+"\"}";
        } finally {
            if(conn!=null) conn.disconnect();
        }
    }

    // ----------------------------------------------------------------
    // 4) inbound socket => “đường về” (khi Napas->API2->...->API1-> socket => BankPhatLenhAPI)
    private void startInboundSocket() {
        new Thread(() -> {
            try(ServerSocket ss=new ServerSocket(INBOUND_SOCKET_PORT)){
                System.out.println("[BankPhatLenhAPI] inbound socket on port=" + INBOUND_SOCKET_PORT);
                while(true){
                    Socket client=ss.accept();
                    new Thread(() -> handleInbound(client)).start();
                }
            } catch(Exception e){
                e.printStackTrace();
            }
        }).start();
    }

    private void handleInbound(Socket sock){
        try(InputStream in=sock.getInputStream();
            OutputStream out=sock.getOutputStream()){

            byte[] buf=new byte[4096];
            int len=in.read(buf);
            if(len<=0) return;
            String inbound=new String(buf,0,len,"UTF-8");

            System.out.println("[BankPhatLenhAPI] inbound => \n"+ inbound);

            // parse iso/json... do something
            out.write("OK".getBytes("UTF-8"));
            out.flush();

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    // ----------------------------------------------------------------
    // class Account
    static class Account {
        String pan;
        long balance;
        String status;

        public Account(String p,long b,String s){
            this.pan=p; this.balance=b; this.status=s;
        }
    }
}
