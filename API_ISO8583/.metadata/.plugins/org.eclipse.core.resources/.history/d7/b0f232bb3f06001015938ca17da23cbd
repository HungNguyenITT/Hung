package API2.service;

import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import utils.IsoSocketUtils;
import utils.JsonMapperUtil;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.util.Map;
import java.util.concurrent.*;

public class NapasConnectionManager {
    private final String host;
    private final int port;
    private final GenericPackager packager;

    private Socket socket;
    private DataInputStream in;
    private DataOutputStream out;

    private final ExecutorService readThread = Executors.newSingleThreadExecutor();
    private final ConcurrentMap<String, CompletableFuture<ISOMsg>> pendingMap = new ConcurrentHashMap<>();

    // NganLuong REST endpoint
    private static final String NGANLUONG_HOST = "http://localhost:8085"; 
    // => /ngl/inquiry, /ngl/payment

    public NapasConnectionManager(String host, int port, GenericPackager packager) throws Exception {
        this.host=host;
        this.port=port;
        this.packager=packager;
        connect();
    }

    private void connect() throws Exception {
        socket = new Socket(host, port);
        socket.setSoTimeout(0);

        in= new DataInputStream(new BufferedInputStream(socket.getInputStream()));
        out= new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));

        System.out.println("[API2 NapasConn] connected => "+ host +":"+ port);

        readThread.submit(this::readLoop);
    }

    private void readLoop() {
        while(!socket.isClosed()) {
            try{
                ISOMsg iso = IsoSocketUtils.readIsoMessageWithHeader(in, packager);
                if(iso==null){
                    System.out.println("[API2 NapasConn] read null => break");
                    break;
                }
                String stan= iso.hasField(11)? iso.getString(11): null;
                CompletableFuture<ISOMsg> fut= (stan==null)? null: pendingMap.remove(stan);
                if(fut!=null){
                    // response cho request outbound
                    fut.complete(iso);
                } else {
                    // inbound request => forward sang NganLuong
                    System.out.println("[API2 NapasConn] inbound request => handleInboundRequest");
                    handleInboundRequest(iso);
                }
            } catch(IOException|ISOException e){
                e.printStackTrace();
                break;
            }
        }
        close();
    }

    /**
     * Tương tự API1: parse F3 => inquiry/payment => gọi HTTP /ngl/inquiry hay /ngl/payment
     * => build ISO response => send Napas
     */
    private void handleInboundRequest(ISOMsg reqIso){
        try {
            Map<String,String> jsonReq = isoToMap(reqIso);
            String f3 = jsonReq.getOrDefault("F3","000000");
            String subF3 = (f3.length()>=3)? f3.substring(0,3) : "000";

            String endpoint;
            if("432".equals(subF3)){
                endpoint = "/api2/inquiry";
            } else if("912".equals(subF3)){
                endpoint = "/api2/payment";
            } else {
                // ko xác định => rc=12
                ISOMsg resp12 = buildAutoResponse(reqIso,"12");
                IsoSocketUtils.sendIsoMessageWithHeader(out, resp12);
                return;
            }
            String url = NGANLUONG_HOST + endpoint;
            String reqBody = JsonMapperUtil.toJson(jsonReq);
            String respBody = doHttpPost(url, reqBody);
            if(respBody==null){
                // no response => 68
                ISOMsg resp68 = buildAutoResponse(reqIso,"68");
                IsoSocketUtils.sendIsoMessageWithHeader(out, resp68);
                return;
            }
            Map<String,String> jsonResp = JsonMapperUtil.fromJson(respBody);
            ISOMsg isoResp = mapToIso(reqIso, jsonResp);
            IsoSocketUtils.sendIsoMessageWithHeader(out, isoResp);

        } catch(Exception e){
            e.printStackTrace();
            try {
                ISOMsg err = buildAutoResponse(reqIso,"96");
                IsoSocketUtils.sendIsoMessageWithHeader(out, err);
            } catch(Exception ignore){}
        }
    }

    private ISOMsg mapToIso(ISOMsg reqIso, Map<String,String> jsonResp) throws ISOException {
        ISOMsg resp = buildAutoResponse(reqIso, jsonResp.getOrDefault("F39","96"));
        // copy các field khác
        for(Map.Entry<String,String> e: jsonResp.entrySet()){
            String k=e.getKey().toUpperCase();
            if(k.startsWith("F") && k.length()>1){
                try {
                    int fn=Integer.parseInt(k.substring(1));
                    if(fn!=39) resp.set(fn, e.getValue());
                } catch(Exception ignore){}
            }
        }
        return resp;
    }

    private Map<String,String> isoToMap(ISOMsg iso)throws ISOException {
        Map<String,String> m=new ConcurrentHashMap<>();
        m.put("F1", iso.getMTI());
        for(int i=2;i<=128;i++){
            if(iso.hasField(i)) {
                m.put("F"+i, iso.getString(i));
            }
        }
        return m;
    }

    private ISOMsg buildAutoResponse(ISOMsg req, String rc)throws ISOException {
        ISOMsg r=new ISOMsg();
        r.setPackager(packager);

        int mtiReq=Integer.parseInt(req.getMTI());
        r.setMTI(String.format("%04d", mtiReq+10));

        copyIfPresent(req, r,2);
        copyIfPresent(req, r,3);
        copyIfPresent(req, r,4);
        copyIfPresent(req, r,11);
        copyIfPresent(req, r,12);
        copyIfPresent(req, r,13);
        copyIfPresent(req, r,32);
        copyIfPresent(req, r,100);
        copyIfPresent(req, r,103);

        r.set(39, rc);
        return r;
    }

    private void copyIfPresent(ISOMsg from, ISOMsg to, int i){
        try {
            if(from.hasField(i)){
                to.set(i, from.getString(i));
            }
        } catch(ISOException e){
            e.printStackTrace();
        }
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try{
            URL u=new URL(url);
            conn=(HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(15000);

            OutputStream outStr=conn.getOutputStream();
            outStr.write(body.getBytes("UTF-8"));
            outStr.flush();
            outStr.close();

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            InputStream in=conn.getInputStream();
            byte[] buf=new byte[4096];
            int len;
            while((len=in.read(buf))!=-1){
                baos.write(buf,0,len);
            }
            in.close();
            return baos.toString("UTF-8");
        } catch(Exception e){
            e.printStackTrace();
            return null;
        } finally {
            if(conn!=null) conn.disconnect();
        }
    }

    public ISOMsg sendAndWait(ISOMsg iso, long timeoutMs) throws ISOException, IOException {
        if(!iso.hasField(11)){
            throw new ISOException("[API2 NapasConn] missing F11 => can't wait");
        }
        String stan= iso.getString(11);
        CompletableFuture<ISOMsg> fut= new CompletableFuture<>();
        pendingMap.put(stan,fut);

        IsoSocketUtils.sendIsoMessageWithHeader(out, iso);

        if(timeoutMs>0){
            ScheduledExecutorService sched= Executors.newSingleThreadScheduledExecutor();
            sched.schedule(()-> {
                if(!fut.isDone()) fut.complete(null);
                sched.shutdown();
            }, timeoutMs, TimeUnit.MILLISECONDS);
        }
        try {
            return fut.get(timeoutMs+500, TimeUnit.MILLISECONDS);
        } catch(Exception e){
            return null;
        } finally {
            pendingMap.remove(stan);
        }
    }

    public void close() {
        try {
            if(socket!=null && !socket.isClosed()){
                socket.close();
            }
        } catch(Exception e){
            e.printStackTrace();
        }
        readThread.shutdownNow();
    }
}
