package NganLuong.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class NganLuongService {
    private static final String BANK_CODE = "970404";
    private static final String API2_URL = "http://localhost:8085/api2";

    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("101010", new Account("101010", 9000000L, "ACTIVE"));
        ACCOUNTS.put("121212", new Account("121212", 2000000L, "ACTIVE"));
        ACCOUNTS.put("131313", new Account("131313", 5000000L, "LOCKED"));
    }

    public Map<String, String> processInquiry(Map<String, String> req) {
        logInbound("NganLuong", "/inquiry", req);
        Map<String,String> stdReq = standardizeRequest(req, "432020");

        Map<String,String> response;
        if(!BANK_CODE.equals(stdReq.get("F100"))){
            System.out.println("[NganLuong] => inquiry => API2, F100="+stdReq.get("F100"));
            response = sendToApi2(stdReq,"/inquiry");
        } else {
            // local
            String pan= stdReq.get("F2");
            Account acc= ACCOUNTS.get(pan);
            String rc= (acc==null||!"ACTIVE".equalsIgnoreCase(acc.getStatus()))? "14":"00";
            response= new HashMap<>(stdReq);
            response.put("F39", rc);
        }

        logOutbound("NganLuong","/inquiry",stdReq);
        logInbound("NganLuong","/inquiryResp",response);
        return response;
    }

    public Map<String, String> processPayment(Map<String, String> req) {
        logInbound("NganLuong","/payment", req);
        Map<String,String> stdReq = standardizeRequest(req, "912020");

        Map<String,String> response;
        if(!BANK_CODE.equals(stdReq.get("F100"))){
            System.out.println("[NganLuong] => payment => API2, F100="+stdReq.get("F100"));
            response = sendToApi2(stdReq,"/payment");
        } else {
            // local
            String pan= stdReq.get("F2");
            long amt= Long.parseLong(stdReq.getOrDefault("F4","0"));
            Account acc= ACCOUNTS.get(pan);
            String rc= (acc==null)? "14"
                        :(!"ACTIVE".equalsIgnoreCase(acc.getStatus()))? "62"
                        :(acc.getBalance()<amt)? "51":"00";
            if("00".equals(rc)){
                acc.setBalance(acc.getBalance()-amt);
            }
            response= new HashMap<>(stdReq);
            response.put("F39",rc);
        }

        logOutbound("NganLuong","/payment", stdReq);
        logInbound("NganLuong","/paymentResp", response);
        return response;
    }

    private Map<String,String> standardizeRequest(Map<String,String> req, String defaultPC){
        // unify
        Map<String,String> r = new HashMap<>(req);
        // F1=0200
        if(!r.containsKey("F1")) r.put("F1","0200");
        // F3=defPC
        if(!r.containsKey("F3")) r.put("F3",defaultPC);
        // F4 => 12 length
        if(!r.containsKey("F4")) r.put("F4","000000000000");
        else {
            try{
                long amt= Long.parseLong(r.get("F4"));
                r.put("F4",String.format("%012d",amt));
            } catch(Exception e){
                r.put("F4","000000000000");
            }
        }
        // F11 => random
        if(!r.containsKey("F11")){
            r.put("F11",String.format("%06d",(int)(Math.random()*1000000)));
        }
        // F12 => HHmmss
        if(!r.containsKey("F12")){
            r.put("F12", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
        }
        // F13 => MMdd
        if(!r.containsKey("F13")){
            r.put("F13", LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")));
        }
        // F2 => if missing
        if(!r.containsKey("F2") && r.containsKey("sourcePan")){
            r.put("F2", r.get("sourcePan"));
        }
        // F103 => if missing
        if(!r.containsKey("F103") && r.containsKey("destPan")){
            r.put("F103", r.get("destPan"));
        }
        // F32=970404
        r.put("F32", BANK_CODE);
        // F100 => ""
        if(!r.containsKey("F100")){
            r.put("F100","");
        }
        return r;
    }

    private Map<String,String> sendToApi2(Map<String,String> json, String endpoint){
        String url=API2_URL+endpoint;
        System.out.println("=== [NganLuong] => Outbound to API2 "+endpoint+" ===");
        System.out.println(JsonMapperUtil.toJson(json));

        String respJson= doHttpPost(url, JsonMapperUtil.toJson(json));
        if(respJson==null){
            System.err.println("[NganLuong] No response from API2 => F39=96");
            Map<String,String> err=new HashMap<>(json);
            err.put("F39","96");
            return err;
        }
        return JsonMapperUtil.fromJson(respJson);
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try{
            URL u=new URL(url);
            conn=(HttpURLConnection)u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);

            OutputStream out=conn.getOutputStream();
            out.write(body.getBytes("UTF-8"));
            out.close();

            ByteArrayOutputStream baos=new ByteArrayOutputStream();
            InputStream in=conn.getInputStream();
            byte[] buf=new byte[4096];
            int len;
            while((len=in.read(buf))!=-1){
                baos.write(buf,0,len);
            }
            in.close();
            return baos.toString("UTF-8");
        } catch(Exception e){
            e.printStackTrace();
            return null;
        } finally {
            if(conn!=null) conn.disconnect();
        }
    }

    private void logInbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)->System.out.println(k+"="+v));
        System.out.println("==========\n");
    }

    private void logOutbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)->System.out.println(k+"="+v));
        System.out.println("==========\n");
    }

    private static class Account {
        private String pan; 
        private long balance; 
        private String status;
        public Account(String p,long b,String s){pan=p; balance=b; status=s;}
        public long getBalance(){return balance;}
        public void setBalance(long b){balance=b;}
        public String getStatus(){return status;}
    }
}
