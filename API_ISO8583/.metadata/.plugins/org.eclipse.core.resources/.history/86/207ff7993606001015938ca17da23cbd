package NganLuong.service;

import org.springframework.stereotype.Service;
import utils.JsonMapperUtil;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class NganLuongService {
    private static final String BANK_CODE = "970404";
    private static final String API2_URL  = "http://localhost:8085/api2";

    // Giả lập DB local
    private static final Map<String, Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("101010", new Account("101010",9000000L,"ACTIVE"));
        ACCOUNTS.put("121212", new Account("121212",2000000L,"ACTIVE"));
        ACCOUNTS.put("131313", new Account("131313",5000000L,"LOCKED"));
    }

    public Map<String,String> processInquiry(Map<String,String> req){
        logInbound("NganLuong","/inquiry", req);

        // Chuẩn hóa => F1=0200, F3=432020, F4..., F11, F12, F13, F32=970404, F100...
        Map<String,String> isoReq= standardizeRequest(req,"432020");

        Map<String,String> resp;
        // Nếu F100 != 970404 => forward => API2
        if(!BANK_CODE.equals( isoReq.get("F100") )){
            System.out.println("[NganLuong] => forward => API2 /inquiry => F100="+ isoReq.get("F100"));
            resp= sendToApi2(isoReq, "/inquiry");
        } else {
            // local
            String pan= isoReq.getOrDefault("F2","");
            Account acc= ACCOUNTS.get(pan);
            String rc;
            if(acc==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())) rc="62";
            else rc="00";

            resp= new HashMap<>(isoReq);
            resp.put("F39", rc);
        }

        logOutbound("NganLuong","/inquiry", isoReq);
        logInbound("NganLuong","/inquiryResp", resp);
        return resp;
    }

    public Map<String,String> processPayment(Map<String,String> req){
        logInbound("NganLuong","/payment", req);

        Map<String,String> isoReq= standardizeRequest(req,"912020");

        Map<String,String> resp;
        if(!BANK_CODE.equals( isoReq.get("F100") )){
            System.out.println("[NganLuong] => forward => API2 /payment => F100="+ isoReq.get("F100"));
            resp= sendToApi2(isoReq, "/payment");
        } else {
            // local
            String pan= isoReq.getOrDefault("F2","");
            long amt= parseLong( isoReq.getOrDefault("F4","0"));
            Account acc= ACCOUNTS.get(pan);
            String rc;
            if(acc==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(acc.getStatus())) rc="62";
            else if(acc.getBalance()<amt) rc="51";
            else {
                acc.setBalance( acc.getBalance()-amt );
                rc="00";
            }
            resp= new HashMap<>(isoReq);
            resp.put("F39",rc);
        }

        logOutbound("NganLuong","/payment", isoReq);
        logInbound("NganLuong","/paymentResp", resp);
        return resp;
    }

    // ========== Chuẩn hóa JSON => F1,F2,F3,F4=12char,F11,F12,F13,F32=970404,F100 ...
    private Map<String,String> standardizeRequest(Map<String,String> req, String defaultPC){
        Map<String,String> isoReq= new HashMap<>();
        req.forEach((k,v)-> isoReq.put(k.toUpperCase(), v));
        if(!isoReq.containsKey("F1")) isoReq.put("F1","0200");
        if(!isoReq.containsKey("F3")) isoReq.put("F3",defaultPC);

        if(!isoReq.containsKey("F4")){
            isoReq.put("F4","000000000000");
        } else {
            long amt= parseLong( isoReq.get("F4") );
            isoReq.put("F4", String.format("%012d", amt));
        }

        if(!isoReq.containsKey("F11")){
            isoReq.put("F11", String.format("%06d",(int)(Math.random()*1000000)));
        }
        if(!isoReq.containsKey("F12")){
            isoReq.put("F12", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
        }
        if(!isoReq.containsKey("F13")){
            isoReq.put("F13", LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd")));
        }
        // F32=970404
        isoReq.put("F32", BANK_CODE);

        if(!isoReq.containsKey("F100")){
            isoReq.put("F100","");
        }
        // Mapped F2=sourcePan, F103=destPan => logic
        return isoReq;
    }

    private Map<String,String> sendToApi2(Map<String,String> isoReq, String endpoint){
        String url= API2_URL+endpoint;
        System.out.println("=== [NganLuong] => Outbound to API2 "+endpoint+" ===");
        System.out.println(JsonMapperUtil.toJson(isoReq));

        String respJson= doHttpPost(url, JsonMapperUtil.toJson(isoReq));
        if(respJson==null){
            System.out.println("[NganLuong] No response from API2 => F39=96");
            Map<String,String> err= new HashMap<>(isoReq);
            err.put("F39","96");
            return err;
        }
        return JsonMapperUtil.fromJson(respJson);
    }

    private String doHttpPost(String url, String body){
        HttpURLConnection conn=null;
        try{
            URL u= new URL(url);
            conn=(HttpURLConnection) u.openConnection();
            conn.setRequestMethod("POST");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type","application/json; charset=UTF-8");

            try(OutputStream out= conn.getOutputStream()){
                out.write(body.getBytes("UTF-8"));
            }
            ByteArrayOutputStream baos= new ByteArrayOutputStream();
            try(InputStream in= conn.getInputStream()){
                byte[] buf=new byte[4096];
                int len;
                while((len=in.read(buf))!=-1){
                    baos.write(buf,0,len);
                }
            }
            return baos.toString("UTF-8");
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }finally{
            if(conn!=null) conn.disconnect();
        }
    }

    private void logInbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Inbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========\n");
    }
    private void logOutbound(String svc,String path, Map<String,String> data){
        System.out.println("\n=== ["+svc+"] Outbound "+path+" ===");
        data.forEach((k,v)-> System.out.println(k+"="+v));
        System.out.println("==========\n");
    }

    private long parseLong(String s){
        try{ return Long.parseLong(s);}catch(Exception e){return 0;}
    }

    static class Account{
        private String pan;
        private long balance;
        private String status;
        public Account(String p, long b, String s){ pan=p; balance=b; status=s;}
        public long getBalance(){return balance;}
        public void setBalance(long b){balance=b;}
        public String getStatus(){return status;}
    }
}
