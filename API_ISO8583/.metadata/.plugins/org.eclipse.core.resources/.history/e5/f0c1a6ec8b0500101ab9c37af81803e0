package API1.service;

import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;
import utils.LogHelper;
import org.springframework.stereotype.Service;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class Api1Service {
    private static final String NAPAS_HOST = "localhost";
    private static final int NAPAS_PORT = 1414;
    private static GenericPackager packager;

    static {
        try {
            // Đảm bảo file iso87binary.xml nằm trong src/main/resources
            InputStream is = Api1Service.class.getResourceAsStream("/iso87binary.xml");
            if (is == null) {
                throw new RuntimeException("File iso87binary.xml not found in resources.");
            }
            packager = new GenericPackager(is);
            System.out.println("GenericPackager initialized successfully for Api1Service.");
        } catch (Exception e) {
            System.err.println("Error initializing GenericPackager: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public Map<String, String> handleInquiry(Map<String, String> jsonMap) throws Exception {
        logInbound("API1", "/inquiry", jsonMap);
        ISOMsg isoMsg = jsonToIso(jsonMap);
        logIsoOutbound("API1", "inquiry => Napas", isoMsg);
        ISOMsg responseIso = sendAndReceiveIso(isoMsg);
        logIsoInbound("API1", "inquiryResp <= Napas", responseIso);
        Map<String, String> response = isoToJson(responseIso);
        logInbound("API1", "/inquiryResp", response);
        return response;
    }

    public Map<String, String> handlePayment(Map<String, String> jsonMap) throws Exception {
        logInbound("API1", "/payment", jsonMap);
        ISOMsg isoMsg = jsonToIso(jsonMap);
        logIsoOutbound("API1", "payment => Napas", isoMsg);
        ISOMsg responseIso = sendAndReceiveIso(isoMsg);
        logIsoInbound("API1", "paymentResp <= Napas", responseIso);
        Map<String, String> response = isoToJson(responseIso);
        logInbound("API1", "/paymentResp", response);
        return response;
    }

    // Chuyển đổi JSON → ISO:
    // Chuyển tất cả các key sang chữ hoa để đảm bảo nếu bên gửi dùng "f100" (chữ thường) thì sẽ được chuyển thành "F100"
    private ISOMsg jsonToIso(Map<String, String> jsonMap) throws Exception {
        ISOMsg iso = new ISOMsg();
        iso.setPackager(packager);
        // Nếu không có MTI, set mặc định là "0200"
        if (!jsonMap.containsKey("MTI") && !jsonMap.containsKey("mti")) {
            iso.setMTI("0200");
        }
        for (Map.Entry<String, String> entry : jsonMap.entrySet()) {
            String key = entry.getKey().toUpperCase();
            if ("MTI".equals(key)) {
                iso.setMTI(entry.getValue());
            } else if (key.startsWith("F")) {
                try {
                    int fieldNum = Integer.parseInt(key.substring(1));
                    iso.set(fieldNum, entry.getValue());
                } catch (NumberFormatException nfe) {
                    System.err.println("Invalid field key: " + key);
                }
            }
        }
        // Đảm bảo các trường F11, F12, F13 có giá trị
        if (!iso.hasField(11)) {
            iso.set(11, String.format("%06d", (int)(Math.random()*1000000)));
        }
        if (!iso.hasField(12)) {
            iso.set(12, new SimpleDateFormat("HHmmss").format(new Date()));
        }
        if (!iso.hasField(13)) {
            iso.set(13, new SimpleDateFormat("MMdd").format(new Date()));
        }
        return iso;
    }

    // Gửi và nhận ISO message qua kết nối socket ephemeral
    private ISOMsg sendAndReceiveIso(ISOMsg isoMsg) throws Exception {
        try (java.net.Socket socket = new java.net.Socket(NAPAS_HOST, NAPAS_PORT)) {
            socket.setSoTimeout(10000);
            InputStream in = socket.getInputStream();
            java.io.OutputStream out = socket.getOutputStream();
            System.out.println("[Api1Service] Sending ISO message to Napas on port " + NAPAS_PORT);
            // Kiểm tra kích thước message sau khi pack
            byte[] packed = isoMsg.pack();
            System.out.println("[Api1Service] Packed message length: " + packed.length);
            IsoSocketUtils.sendIsoMessageWithHeader(out, isoMsg);
            Thread.sleep(100); // Delay nhỏ để đảm bảo dữ liệu được gửi đầy đủ
            System.out.println("[Api1Service] Waiting for response from Napas...");
            ISOMsg response = IsoSocketUtils.readIsoMessageWithHeader(in, packager);
            System.out.println("[Api1Service] Received response from Napas");
            return response;
        }
    }

    private Map<String, String> isoToJson(ISOMsg iso) throws Exception {
        Map<String, String> jsonMap = new HashMap<>();
        if (iso == null) {
            jsonMap.put("F39", "96");
            return jsonMap;
        }
        jsonMap.put("MTI", iso.getMTI());
        for (int i = 1; i <= 128; i++) {
            if (iso.hasField(i)) {
                jsonMap.put("F" + i, iso.getString(i));
            }
        }
        return jsonMap;
    }

    private void logInbound(String service, String path, Map<String, String> data) {
        System.out.println("=== [" + service + "] Inbound " + path + " ===");
        data.forEach((k, v) -> System.out.println(k + "=" + v));
        System.out.println("==========");
    }

    private void logIsoOutbound(String service, String path, ISOMsg isoMsg) {
        System.out.println("=== [" + service + "] " + path + " ===");
        IsoDebugHelper.debugIso(service + " OUT", isoMsg);
        LogHelper.logToBothBanks(isoMsg, "OUT");
    }

    private void logIsoInbound(String service, String path, ISOMsg isoMsg) {
        System.out.println("=== [" + service + "] " + path + " ===");
        IsoDebugHelper.debugIso(service + " IN", isoMsg);
        LogHelper.logToBothBanks(isoMsg, "IN");
    }
}
