package BankTCB;

import org.jpos.iso.*;
import org.jpos.iso.packager.GenericPackager;
import utils.IsoDebugHelper;
import utils.IsoSocketUtils;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.*;

public class TcbSocket {

    private static final String NAPAS_HOST = "localhost";
    private static final int NAPAS_PORT = 1313;
    private static final String F32_THIS_BANK = "970402";

    private static final Map<String,Account> ACCOUNTS = new HashMap<>();
    static {
        ACCOUNTS.put("444444", new Account("444444",2_000_000L,"ACTIVE"));
        ACCOUNTS.put("555555", new Account("555555",1_000_000L,"ACTIVE"));
        ACCOUNTS.put("666666", new Account("666666",5_000_000L,"LOCKED"));
    }

    private static Socket socket;
    private static OutputStream out;
    private static InputStream in;

    private static final Map<String, CompletableFuture<ISOMsg>> pendingRequests = new ConcurrentHashMap<>();

    // jPOS packager loaded from iso87binary.xml
    private static GenericPackager isoPackager;

    public static void main(String[] args) {
        loadIsoPackager();
        connectToNapas();
        runCLI();
    }

    // load same iso87binary.xml used by Napas
    private static void loadIsoPackager(){
        try {
            InputStream is = TcbSocket.class.getResourceAsStream("/iso87binary.xml");
            if(is == null){
                throw new RuntimeException("[TCB] iso87binary.xml not found in resources!");
            }
            isoPackager = new GenericPackager(is);
            System.out.println("[TCB] Loaded iso87binary.xml => packager ready");
        } catch(Exception e){
            throw new RuntimeException("[TCB] Failed to load iso87binary.xml", e);
        }
    }

    private static void connectToNapas(){
        while(true){
            try {
                socket = new Socket(NAPAS_HOST, NAPAS_PORT);
                socket.setSoTimeout(0);
                out = socket.getOutputStream();
                in  = socket.getInputStream();
                System.out.println("[TCB] connected Napas " + socket.getRemoteSocketAddress());

                new Thread(TcbSocket::readLoop).start();
                break;
            } catch(Exception e){
                System.err.println("[TCB] connect Napas fail => retry 5s..." + e.getMessage());
                try{Thread.sleep(5000);}catch(Exception ignore){}
            }
        }
    }

    private static void readLoop(){
        while(true){
            try {
                ISOMsg iso = IsoSocketUtils.readIsoMessageWithHeader(in, isoPackager);
                if(iso==null){
                    System.out.println("[TCB] read null => disconnect?");
                    break;
                }
                IsoDebugHelper.debugIso("[TCB] Inbound", iso);

                String stan = iso.hasField(11)? iso.getString(11) : null;
                CompletableFuture<ISOMsg> fut= (stan==null)? null: pendingRequests.remove(stan);

                if(fut!=null){
                    fut.complete(iso);
                } else {
                    handleInboundRequest(iso);
                }

            } catch(SocketTimeoutException te){
                continue;
            } catch(Exception e){
                e.printStackTrace();
                break;
            }
        }
        System.out.println("[TCB] readLoop ended => close socket => reconnect?");
        try{socket.close();}catch(Exception ignore){}
        connectToNapas();
    }

    /**
     * inbound request => credit or inquiry => respond
     */
    private static void handleInboundRequest(ISOMsg reqIso) throws ISOException, IOException {
        String pc = reqIso.hasField(3)? reqIso.getString(3): "";
        String f103 = reqIso.hasField(103)? reqIso.getString(103): "";
        long amt= parseAmount(reqIso);

        String rc="96";
        if("432020".equals(pc)){
            // inquiry
            Account a= ACCOUNTS.get(f103);
            if(a==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(a.status)) rc="62";
            else rc="00";
        } else if("912020".equals(pc)){
            // payment => credit
            Account a= ACCOUNTS.get(f103);
            if(a==null) rc="14";
            else if(!"ACTIVE".equalsIgnoreCase(a.status)) rc="62";
            else {
                a.balance += amt;
                rc="00";
            }
        }

        ISOMsg resp= new ISOMsg();
        resp.setPackager(isoPackager);
        int mti= Integer.parseInt(reqIso.getMTI());
        resp.setMTI(String.format("%04d", mti+10));

        copyIfPresent(reqIso, resp, 2);
        copyIfPresent(reqIso, resp, 3);
        copyIfPresent(reqIso, resp, 4);
        copyIfPresent(reqIso, resp, 11);
        copyIfPresent(reqIso, resp, 12);
        copyIfPresent(reqIso, resp, 13);
        copyIfPresent(reqIso, resp, 32);
        copyIfPresent(reqIso, resp, 100);
        copyIfPresent(reqIso, resp, 103);

        resp.set(39, rc);

        IsoDebugHelper.debugIso("[TCB] inboundResp => Napas", resp);
        IsoSocketUtils.sendIsoMessageWithHeader(out, resp);
    }

    private static void runCLI(){
        Scanner sc=new Scanner(System.in);
        String receivingBankF100=null;

        while(true){
            System.out.println("[TCB CLI] 1.Set bank 2.Inquiry 3.Payment 0.Exit");
            String c=sc.nextLine().trim();
            if("0".equals(c)) break;

            switch(c){
                case "1":
                    System.out.println("1=VCB(970401), 2=TCB(970402), 3=Zalo(970403), 4=NganLuong(970404)");
                    String c2=sc.nextLine().trim();
                    if("1".equals(c2)) receivingBankF100="970401";
                    else if("2".equals(c2)) receivingBankF100="970402";
                    else if("3".equals(c2)) receivingBankF100="970403";
                    else if("4".equals(c2)) receivingBankF100="970404";
                    else System.out.println("invalid bank code");
                    break;
                case "2":
                    if(receivingBankF100==null){
                        System.out.println("No receiving bank set!");
                        break;
                    }
                    System.out.print("sourcePan: ");
                    String spI=sc.nextLine().trim();
                    System.out.print("destPan: ");
                    String dpI=sc.nextLine().trim();
                    doInquiry(spI, dpI, receivingBankF100);
                    break;
                case "3":
                    if(receivingBankF100==null){
                        System.out.println("No receiving bank set!");
                        break;
                    }
                    System.out.print("sourcePan: ");
                    String spP=sc.nextLine().trim();
                    System.out.print("destPan: ");
                    String dpP=sc.nextLine().trim();
                    System.out.print("amount: ");
                    long amt=Long.parseLong(sc.nextLine().trim());
                    doPayment(spP, dpP, amt, receivingBankF100);
                    break;
            }
        }
    }

    private static void doInquiry(String sourcePan, String destPan, String f100){
        String rc= checkLocalDebit(sourcePan,0);
        if(!"00".equals(rc)){
            System.out.println("[TCB] local fail => "+ rc);
            return;
        }
        try{
            ISOMsg iso=new ISOMsg();
            iso.setPackager(isoPackager);
            iso.setMTI("0200");
            iso.set(2, sourcePan);
            iso.set(3, "432020");
            iso.set(4, "000000000000"); // 12 zero
            iso.set(32, F32_THIS_BANK);
            iso.set(100, f100);
            iso.set(103, destPan);
            setF11F12F13(iso);

            IsoDebugHelper.debugIso("[TCB] => Napas (Inquiry)", iso);
            ISOMsg resp= sendAndWait(iso,15000);
            if(resp==null){
                System.out.println("[TCB] Timeout/no response => ???");
                return;
            }
            IsoDebugHelper.debugIso("[TCB] <= Napas (InquiryResp)", resp);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private static void doPayment(String sourcePan, String destPan, long amt, String f100){
        String rc= checkLocalDebit(sourcePan, amt);
        if(!"00".equals(rc)){
            System.out.println("[TCB] local fail => "+ rc);
            return;
        }
        try{
            ISOMsg iso=new ISOMsg();
            iso.setPackager(isoPackager);
            iso.setMTI("0200");
            iso.set(2, sourcePan);
            iso.set(3, "912020");
            iso.set(4, String.format("%012d", amt));
            iso.set(32, F32_THIS_BANK);
            iso.set(100, f100);
            iso.set(103, destPan);
            setF11F12F13(iso);

            IsoDebugHelper.debugIso("[TCB] => Napas (Payment)", iso);
            ISOMsg resp = sendAndWait(iso,15000);
            if(resp==null){
                System.out.println("[TCB] Timeout => ???");
                return;
            }
            IsoDebugHelper.debugIso("[TCB] <= Napas (PaymentResp)", resp);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private static ISOMsg sendAndWait(ISOMsg iso, long timeoutMs)throws ISOException, IOException {
        String stan= iso.getString(11);
        if(stan==null) throw new ISOException("missing F11 => cannot wait response");

        CompletableFuture<ISOMsg> fut=new CompletableFuture<>();
        pendingRequests.put(stan,fut);

        IsoSocketUtils.sendIsoMessageWithHeader(out, iso);

        ScheduledExecutorService sch= Executors.newSingleThreadScheduledExecutor();
        sch.schedule(()-> {
            if(!fut.isDone()) fut.complete(null);
            sch.shutdown();
        }, timeoutMs, TimeUnit.MILLISECONDS);

        try{
            return fut.get(timeoutMs+1000, TimeUnit.MILLISECONDS);
        }catch(Exception e){
            return null;
        }finally{
            pendingRequests.remove(stan);
        }
    }

    private static void setF11F12F13(ISOMsg iso)throws ISOException {
        iso.set(11, String.format("%06d",(int)(Math.random()*1000000)));
        LocalDateTime now= LocalDateTime.now();
        iso.set(12, now.format(DateTimeFormatter.ofPattern("HHmmss")));
        iso.set(13, now.format(DateTimeFormatter.ofPattern("MMdd")));
    }

    private static void copyIfPresent(ISOMsg src, ISOMsg dst, int i)throws ISOException{
        if(src.hasField(i)){
            dst.set(i, src.getString(i));
        }
    }

    private static String checkLocalDebit(String pan, long amt){
        Account a= ACCOUNTS.get(pan);
        if(a==null) return "14";
        if(!"ACTIVE".equalsIgnoreCase(a.status)) return "62";
        if(a.balance < amt) return "51";
        a.balance-=amt;
        return "00";
    }

    private static long parseAmount(ISOMsg iso)throws ISOException {
        if(!iso.hasField(4)) return 0;
        String s= iso.getString(4).replaceFirst("^0+","");
        if(s.isEmpty()) return 0;
        return Long.parseLong(s);
    }

    static class Account {
        String pan;
        long balance;
        String status;
        Account(String p, long b, String s){
            pan=p; balance=b; status=s;
        }
    }
}
