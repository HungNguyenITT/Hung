package BankPLSocket;


import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOException;
import org.jpos.iso.packager.ISO87APackager;

import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * Bank phát lệnh Socket:
 *  - Chỉ có tài khoản gửi (ACCOUNTS_SOURCE), kiểm tra cục bộ.
 *  - Inquiry => nếu source ok => forward Napas => Nhận response (dest ok => field39=00).
 *  - Payment => trừ source cục bộ => forward Napas => Nhận response => ...
 */
public class BankPhatLenhSocket {

    // Tài khoản gửi
    private static final Map<String, Account> ACCOUNTS_SOURCE = new HashMap<>();
    static {
        ACCOUNTS_SOURCE.put("111111", new Account("111111", 2_000_000L, "ACTIVE"));
        ACCOUNTS_SOURCE.put("222222", new Account("222222", 1_000_000L, "ACTIVE"));
        ACCOUNTS_SOURCE.put("333333", new Account("333333", 5_000_000L, "LOCKED"));
    }

    // Napas config
    private static final String NAPAS_HOST = "localhost";
    private static final int    NAPAS_PORT = 9090;

    public static void main(String[] args){
        BankPhatLenhSocket app=new BankPhatLenhSocket();
        app.runMenu();
    }

    private void runMenu() {
        Scanner sc=new Scanner(System.in);
        while(true){
            System.out.println("\n=== Bank phát lệnh ===");
            System.out.println("1. Inquiry (432020)");
            System.out.println("2. Payment (912020)");
            System.out.println("0. Thoát");
            System.out.print("Chọn: ");
            String choice=sc.nextLine().trim();
            if("0".equals(choice)) break;

            System.out.print("sourcePan: ");
            String sPan=sc.nextLine().trim();

            System.out.print("destPan: ");
            String dPan=sc.nextLine().trim();

            if("1".equals(choice)) {
                // inquiry
                doInquiry(sPan, dPan);
            } else if("2".equals(choice)){
                // payment
                System.out.print("amount: ");
                long amt=Long.parseLong(sc.nextLine().trim());
                doPayment(sPan, dPan, amt);
            } else {
                System.out.println("Lựa chọn ko hợp lệ!");
            }
        }
    }

    private void doInquiry(String sourcePan, String destPan){
        // Kiểm tra cục bộ tài khoản gửi
        String localCheck = checkSource(sourcePan);
        if(!"00".equals(localCheck)){
            System.out.println("[BankPhatLenh] sourcePan fail => field39="+ localCheck);
            return;
        }
        // sourcePan ok => forward Napas
        try {
            ISOMsg isoReq=new ISOMsg();
            isoReq.setPackager(new ISO87APackager());
            isoReq.setMTI("0200");
            isoReq.set(2, sourcePan);
            isoReq.set(3, "432020");
            isoReq.set(4, "0");
            isoReq.set(47, destPan);

            System.out.println("[PhatLenh] Gửi Napas => inquiry...");
            byte[] respBytes = sendToNapas(isoReq.pack());
            if(respBytes==null) {
                System.out.println("[PhatLenh] Ko nhận response!");
                return;
            }
            ISOMsg isoResp=new ISOMsg();
            isoResp.setPackager(new ISO87APackager());
            isoResp.unpack(respBytes);

            String f39= isoResp.hasField(39)? isoResp.getString(39):"NULL";
            System.out.println("[PhatLenh] inquiry => field39="+ f39);
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private void doPayment(String sourcePan, String destPan, long amt){
        // cục bộ: trừ source
        // check source
        Account s= ACCOUNTS_SOURCE.get(sourcePan);
        if(s==null) {
            System.out.println("[PhatLenh] sourcePan fail => field39=14");
            return;
        }
        if(!"ACTIVE".equalsIgnoreCase(s.status)) {
            System.out.println("[PhatLenh] sourcePan locked => field39=62");
            return;
        }
        if(s.balance < amt) {
            System.out.println("[PhatLenh] sourcePan insufficient => field39=51");
            return;
        }
        // trừ
        s.balance -= amt;

        // forward Napas => check dest
        try {
            ISOMsg isoReq=new ISOMsg();
            isoReq.setPackager(new ISO87APackager());
            isoReq.setMTI("0200");
            isoReq.set(2, sourcePan);
            isoReq.set(3, "912020");
            isoReq.set(4, String.valueOf(amt));
            isoReq.set(47, destPan);

            System.out.println("[PhatLenh] send Payment to Napas => check dest...");
            byte[] respBytes=sendToNapas(isoReq.pack());
            if(respBytes==null){
                System.out.println("[PhatLenh] No response Napas => rollback???");
                // Nếu muốn rollback => s.balance += amt
                return;
            }
            ISOMsg isoResp=new ISOMsg();
            isoResp.setPackager(new ISO87APackager());
            isoResp.unpack(respBytes);

            String f39= isoResp.hasField(39)? isoResp.getString(39):"NULL";
            System.out.println("[PhatLenh] payment => field39="+ f39);
            if(!"00".equals(f39)){
                // rollback source ??? tuỳ
                // s.balance += amt
            }

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private byte[] sendToNapas(byte[] data){
        try(Socket socket=new Socket(NAPAS_HOST, NAPAS_PORT);
            OutputStream out=socket.getOutputStream();
            InputStream in=socket.getInputStream()) {
            out.write(data);
            out.flush();

            byte[] buf=new byte[4096];
            int len=in.read(buf);
            if(len<=0) return null;
            byte[] resp=new byte[len];
            System.arraycopy(buf,0,resp,0,len);
            return resp;
        } catch(Exception e){
            e.printStackTrace();
            return null;
        }
    }

    /**
     * checkSource => trả "00" nếu ok, else "14/62..."
     */
    private String checkSource(String pan){
        Account a= ACCOUNTS_SOURCE.get(pan);
        if(a==null) return "14";
        if(!"ACTIVE".equalsIgnoreCase(a.status)) return "62";
        return "00";
    }

    private static class Account {
        String pan;
        long balance;
        String status;

        public Account(String p, long b, String s){
            this.pan=p; this.balance=b; this.status=s;
        }
    }
}
